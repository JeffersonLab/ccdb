Import('default_env', 'ccdb_sqlite_lib')
env = default_env.Clone()  #Clone it to add library specified things


#TODO move to normal debug\release modes
#debugcflags = ['-W1', '-GX', '-EHsc', '-D_DEBUG', '/MDd']   #extra compile flags for debug
#releasecflags = ['-O2', '-EHsc', '-DNDEBUG', '/MD']         #extra compile flags for release

#Mac Os X requires install_name flag to be built properly
if env['PLATFORM'] == 'darwin':
    print
    print "Darwin platform is detected. Setting -install_name @rpath/"+'${TARGET.file}'
    env.Append(SHLINKFLAGS = ['-install_name', '@rpath/'+'${TARGET.file}'])
    

#Set target and sources
lib_target  = "ccdb"
lib_sources = [
    
    #some global objects    
    "Console.cc",
    "Log.cc",
    "CCDBError.cc",
    "GlobalMutex.cc",
    "IMutex.cc",
    "ISyncObject.cc",
    "PthreadMutex.cc",
    "PthreadSyncObject.cc",

    #user api
    "Calibration.cc",
    "CalibrationGenerator.cc",
    "SQLiteCalibration.cc",

    #helper classes
    "Helpers/StringUtils.cc",
    "Helpers/PathUtils.cc",
    "Helpers/WorkUtils.cc",
    "Helpers/TimeProvider.cc",

    #model and provider
    "Model/ObjectsOwner.cc",
    "Model/StoredObject.cc",
    "Model/Assignment.cc",
    "Model/ConstantsTypeColumn.cc",
    "Model/ConstantsTypeTable.cc",
    "Model/Directory.cc",
    "Model/EventRange.cc",
    "Model/RunRange.cc",
    "Model/Variation.cc",
    "Providers/DataProvider.cc",
    "Providers/FileDataProvider.cc",
    "Providers/SQLiteDataProvider.cc",
    "Providers/IAuthentication.cc",
    "Providers/EnvironmentAuthentication.cc",
    ]

#additional variables
env.Append(LIBS = ['pthread'])
env.Append(LIBS = ccdb_sqlite_lib)

if env['PLATFORM'] != 'darwin':
    env.Append(LIBS = ['rt'])

env.Append(CCFLAGS='-Wno-unknown-pragmas -g -O2 -std=c++11') #Disable unknown pragmas warnings. CCDB files have '#pragma region' records to structurize files.

if ARGUMENTS.get("with-m32","false")=="true":
    print("compile with -m32 flag")
    env.Append(CCFLAGS='-m32') #Disable unknown pragmas warnings. CCDB files have '#pragma region' records to structurize files. 
else:
    print("To compile with -m32 forced use 'with-m32=true' flag")

#Build with mysql or no?                                           
#Read user flag for using mysql dependencies or not
if ARGUMENTS.get("mysql","no")=="yes" or ARGUMENTS.get("with-mysql","true")=="true":
    #User wants mysql!
    print "Building CCDB using MySQL dependencies"
    print "To build CCDB without mysql dependencies. Run scons with 'with-mysql=false'"
    print ""

    print('WhereIs("mysql_config"): {}'.format(WhereIs("mysql_config")))

    mysql_config_path = WhereIs("mysql_config")

    if not mysql_config_path:
        print
        print 	"ERROR. Can't find 'mysql_config' utility which is needed to build CCDB with MySQL support."
        print 	"Two options is possible to build CCDB:"
        print   "  1. Install mysql_config (RHEL has it in mysql-devel package, Ubuntu in libmysqlclient-dev)"
        print   "  2. Build CCDB without MySQL dependencies (use 'mysql=no' scons flag)"
        print
        Exit()

    mysql_sources = [
    #user api
    "MySQLCalibration.cc",

    #model and provider
    "Providers/MySQLConnectionInfo.cc",
    "Providers/MySQLDataProvider.cc"]

    lib_sources.extend(mysql_sources)
    env.Append(CPPDEFINES='CCDB_MYSQL')

    from subprocess import Popen, PIPE
    import shlex

    process = Popen([mysql_config_path, "--libs", "--cflags"], stdout=PIPE)
    (output, err) = process.communicate()
    exit_code = process.wait()

    mysql_lib_location_flag = ""
    for token in shlex.split(output):
        if token.startswith('-L'):
            env.Append(LINKFLAGS=[token])   # Add something like -L/usr/lib64/mysql to lib flags
            break

    env.Append(LIBS=['mysqlclient'])
    env.ParseConfig('mysql_config --cflags')
else:
    print "CCDB is being build WITHOUT MySQL support. Use 'with-mysql=true' flag to explicitly enable MySQL support"


if ARGUMENTS.get("with-perflog","false")=="true":
    print("with-perflog=true  - compile with performance logging ")
    env.Append(CPPDEFINES='CCDB_PERFLOG_ON')
else:
    print("with-perflog=false - NO performance logging ")

if ARGUMENTS.get("with-cacheon", "true")=="true":
    print("with-cacheon=true  - with data cache on by default ")
    env.Append(CPPDEFINES='CCDB_CACHE_ON')
else:
    print("with-cacheon=false - with data cache off by default ")

#Making library
lib = env.SharedLibrary(target = lib_target, source = lib_sources)
env.Install('#lib', lib)

static_lib = env.StaticLibrary(target = lib_target,  source = lib_sources)
env.Install('#lib', static_lib)
