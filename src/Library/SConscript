
Import('default_env')
env = default_env.Clone()
#TODO move to normal debug\release modes

#debugcflags = ['-W1', '-GX', '-EHsc', '-D_DEBUG', '/MDd']   #extra compile flags for debug
#releasecflags = ['-O2', '-EHsc', '-DNDEBUG', '/MD']         #extra compile flags for release
#env.Append(CCFLAGS='-g')

#env = default_env.Clone()

#Configure environment to create ccdb_library


#Mac Os X requires install_name flag to properly build 
if env['PLATFORM'] == 'darwin':
    print
    print "Darwin platform is detected. Setting -install_name @rpath/libccdb.dylib"
    env.Append(SHLINKFLAGS = ['-install_name', '@rpath/'+'${TARGET.file}'])
    
     
lib_target  = "ccdb"
lib_sources = [
    
    #some global objects    
	"Console.cc",
	"Log.cc",
	"CCDBError.cc",
	"GlobalMutex.cc",
	"IMutex.cc",
	"ISyncObject.cc",
	"PthreadMutex.cc",
	"PthreadSyncObject.cc",
	
	#user api
	"Calibration.cc",
	"CalibrationGenerator.cc",
    "SQLiteCalibration.cc",
	
	#helper classes
	"Helpers/StringUtils.cc",
	"Helpers/PathUtils.cc",
	"Helpers/WorkUtils.cc",
	
	#model and provider
	"Model/ObjectsOwner.cc",
	"Model/StoredObject.cc",
	"Model/Assignment.cc",
	"Model/ConstantsTypeColumn.cc",
	"Model/ConstantsTypeTable.cc",
	"Model/Directory.cc",
	"Model/EventRange.cc",
	"Model/RunRange.cc",
	"Model/Variation.cc",
	"Providers/DataProvider.cc",
	"Providers/FileDataProvider.cc",
    "Providers/SQLiteDataProvider.cc",
	"Providers/IAuthentication.cc",
	"Providers/EnvironmentAuthentication.cc",
    
    #sqlite embedding
    "#src/SQLite/sqlite3.c"
	]

#additional variables
env.Append(LIBS = ['pthread'])
env.Append(CPPDEFINES = 'SQLITE_OMIT_LOAD_EXTENSION')

#Read user flag for using mysql dependencies or not
if ARGUMENTS.get("mysql","yes")=="yes":
	#User wants mysql!
	print "Building CCDB using MySQL dependencies"
	print "To build CCDB without mysql dependencies. Run scons with 'mysql=no' flag"
	print ""
	
	if not WhereIs("mysql_config"):
		print
		print 	"Can't find 'mysql_config' utility which is needed to build CCDB with MySQL support."
		print 	"Two options is possible to build CCDB:"
		print   "  1. Install mysql_config (RHEL has it in mysql-devel package, Ubuntu in libmysqlclient-dev)"
		print   "  2. Build CCDB without MySQL dependencies (use 'mysql=no' scons flag)"
		print
		Exit()
	
	mysql_sources = [
	#user api
	"MySQLCalibration.cc",
	
	#model and provider
	"Providers/MySQLConnectionInfo.cc",
	"Providers/MySQLDataProvider.cc"]
	
	lib_sources.extend(mysql_sources)	
	env.Append(CPPDEFINES='CCDB_MYSQL')
	env.ParseConfig('mysql_config --libs --cflags')
else:
	print "CCDB is being build WITHOUT MySQL support. Use 'mysql=yes' flag to explicitly enable MySQL support"
	

#Making library
lib = env.SharedLibrary(target = lib_target, source = lib_sources)
env.Install('#lib', lib)

static_lib = env.StaticLibrary(target = lib_target, source = lib_sources)
env.Install('#lib', static_lib)
