# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ccdb_pyllapi', [dirname(__file__)])
        except ImportError:
            import _ccdb_pyllapi
            return _ccdb_pyllapi
        if fp is not None:
            try:
                _mod = imp.load_module('_ccdb_pyllapi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ccdb_pyllapi = swig_import_helper()
    del swig_import_helper
else:
    import _ccdb_pyllapi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ccdb_pyllapi.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _ccdb_pyllapi.SwigPyIterator_value(self)
    def incr(self, n = 1): return _ccdb_pyllapi.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _ccdb_pyllapi.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _ccdb_pyllapi.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _ccdb_pyllapi.SwigPyIterator_equal(self, *args)
    def copy(self): return _ccdb_pyllapi.SwigPyIterator_copy(self)
    def next(self): return _ccdb_pyllapi.SwigPyIterator_next(self)
    def __next__(self): return _ccdb_pyllapi.SwigPyIterator___next__(self)
    def previous(self): return _ccdb_pyllapi.SwigPyIterator_previous(self)
    def advance(self, *args): return _ccdb_pyllapi.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _ccdb_pyllapi.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _ccdb_pyllapi.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _ccdb_pyllapi.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _ccdb_pyllapi.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _ccdb_pyllapi.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _ccdb_pyllapi.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _ccdb_pyllapi.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class RunRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RunRange, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ccdb_pyllapi.new_RunRange()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccdb_pyllapi.delete_RunRange
    __del__ = lambda self : None;
    def GetId(self): return _ccdb_pyllapi.RunRange_GetId(self)
    def GetMax(self): return _ccdb_pyllapi.RunRange_GetMax(self)
    def GetMin(self): return _ccdb_pyllapi.RunRange_GetMin(self)
    def GetName(self): return _ccdb_pyllapi.RunRange_GetName(self)
    def GetComment(self): return _ccdb_pyllapi.RunRange_GetComment(self)
    def SetId(self, *args): return _ccdb_pyllapi.RunRange_SetId(self, *args)
    def SetMax(self, *args): return _ccdb_pyllapi.RunRange_SetMax(self, *args)
    def SetMin(self, *args): return _ccdb_pyllapi.RunRange_SetMin(self, *args)
    def SetName(self, *args): return _ccdb_pyllapi.RunRange_SetName(self, *args)
    def SetComment(self, *args): return _ccdb_pyllapi.RunRange_SetComment(self, *args)
    def SetRange(self, *args): return _ccdb_pyllapi.RunRange_SetRange(self, *args)
    def GetCreatedTime(self): return _ccdb_pyllapi.RunRange_GetCreatedTime(self)
    def SetCreatedTime(self, *args): return _ccdb_pyllapi.RunRange_SetCreatedTime(self, *args)
    def GetModifiedTime(self): return _ccdb_pyllapi.RunRange_GetModifiedTime(self)
    def SetModifiedTime(self, *args): return _ccdb_pyllapi.RunRange_SetModifiedTime(self, *args)
RunRange_swigregister = _ccdb_pyllapi.RunRange_swigregister
RunRange_swigregister(RunRange)

class Directory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Directory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Directory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ccdb_pyllapi.new_Directory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccdb_pyllapi.delete_Directory
    __del__ = lambda self : None;
    def GetParentDirectory(self): return _ccdb_pyllapi.Directory_GetParentDirectory(self)
    def GetSubdirectories(self): return _ccdb_pyllapi.Directory_GetSubdirectories(self)
    def AddSubdirectory(self, *args): return _ccdb_pyllapi.Directory_AddSubdirectory(self, *args)
    def DisposeSubdirectories(self): return _ccdb_pyllapi.Directory_DisposeSubdirectories(self)
    def GetId(self): return _ccdb_pyllapi.Directory_GetId(self)
    def SetId(self, *args): return _ccdb_pyllapi.Directory_SetId(self, *args)
    def GetParentId(self): return _ccdb_pyllapi.Directory_GetParentId(self)
    def SetParentId(self, *args): return _ccdb_pyllapi.Directory_SetParentId(self, *args)
    def GetName(self): return _ccdb_pyllapi.Directory_GetName(self)
    def SetName(self, *args): return _ccdb_pyllapi.Directory_SetName(self, *args)
    def GetFullPath(self): return _ccdb_pyllapi.Directory_GetFullPath(self)
    def SetFullPath(self, *args): return _ccdb_pyllapi.Directory_SetFullPath(self, *args)
    def GetCreatedTime(self): return _ccdb_pyllapi.Directory_GetCreatedTime(self)
    def SetCreatedTime(self, *args): return _ccdb_pyllapi.Directory_SetCreatedTime(self, *args)
    def GetModifiedTime(self): return _ccdb_pyllapi.Directory_GetModifiedTime(self)
    def SetModifiedTime(self, *args): return _ccdb_pyllapi.Directory_SetModifiedTime(self, *args)
    def GetComment(self): return _ccdb_pyllapi.Directory_GetComment(self)
    def SetComment(self, *args): return _ccdb_pyllapi.Directory_SetComment(self, *args)
Directory_swigregister = _ccdb_pyllapi.Directory_swigregister
Directory_swigregister(Directory)

class DataProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataProvider, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ccdb_pyllapi.delete_DataProvider
    __del__ = lambda self : None;
    def Connect(self, *args): return _ccdb_pyllapi.DataProvider_Connect(self, *args)
    def Disconnect(self): return _ccdb_pyllapi.DataProvider_Disconnect(self)
    def IsConnected(self): return _ccdb_pyllapi.DataProvider_IsConnected(self)
    def GetDirectory(self, *args): return _ccdb_pyllapi.DataProvider_GetDirectory(self, *args)
    def GetRootDirectory(self): return _ccdb_pyllapi.DataProvider_GetRootDirectory(self)
    def SearchDirectories(self, *args): return _ccdb_pyllapi.DataProvider_SearchDirectories(self, *args)
    def MakeDirectory(self, *args): return _ccdb_pyllapi.DataProvider_MakeDirectory(self, *args)
    def UpdateDirectory(self, *args): return _ccdb_pyllapi.DataProvider_UpdateDirectory(self, *args)
    def DeleteDirectory(self, *args): return _ccdb_pyllapi.DataProvider_DeleteDirectory(self, *args)
    def GetConstantsTypeTable(self, *args): return _ccdb_pyllapi.DataProvider_GetConstantsTypeTable(self, *args)
    def GetConstantsTypeTables(self, *args): return _ccdb_pyllapi.DataProvider_GetConstantsTypeTables(self, *args)
    def SearchConstantsTypeTables(self, *args): return _ccdb_pyllapi.DataProvider_SearchConstantsTypeTables(self, *args)
    def CountConstantsTypeTables(self, *args): return _ccdb_pyllapi.DataProvider_CountConstantsTypeTables(self, *args)
    def LoadColumns(self, *args): return _ccdb_pyllapi.DataProvider_LoadColumns(self, *args)
    def CreateConstantsTypeTable(self, *args): return _ccdb_pyllapi.DataProvider_CreateConstantsTypeTable(self, *args)
    def UpdateConstantsTypeTable(self, *args): return _ccdb_pyllapi.DataProvider_UpdateConstantsTypeTable(self, *args)
    def DeleteConstantsTypeTable(self, *args): return _ccdb_pyllapi.DataProvider_DeleteConstantsTypeTable(self, *args)
    def CreateRunRange(self, *args): return _ccdb_pyllapi.DataProvider_CreateRunRange(self, *args)
    def GetRunRanges(self, *args): return _ccdb_pyllapi.DataProvider_GetRunRanges(self, *args)
    def GetRunRange(self, *args): return _ccdb_pyllapi.DataProvider_GetRunRange(self, *args)
    def GetOrCreateRunRange(self, *args): return _ccdb_pyllapi.DataProvider_GetOrCreateRunRange(self, *args)
    def UpdateRunRange(self, *args): return _ccdb_pyllapi.DataProvider_UpdateRunRange(self, *args)
    def DeleteRunRange(self, *args): return _ccdb_pyllapi.DataProvider_DeleteRunRange(self, *args)
    def GetVariation(self, *args): return _ccdb_pyllapi.DataProvider_GetVariation(self, *args)
    def GetVariations(self, *args): return _ccdb_pyllapi.DataProvider_GetVariations(self, *args)
    def CreateVariation(self, *args): return _ccdb_pyllapi.DataProvider_CreateVariation(self, *args)
    def UpdateVariation(self, *args): return _ccdb_pyllapi.DataProvider_UpdateVariation(self, *args)
    def DeleteVariation(self, *args): return _ccdb_pyllapi.DataProvider_DeleteVariation(self, *args)
    def GetAssignmentShort(self, *args): return _ccdb_pyllapi.DataProvider_GetAssignmentShort(self, *args)
    def GetAssignmentFull(self, *args): return _ccdb_pyllapi.DataProvider_GetAssignmentFull(self, *args)
    def CreateAssignment(self, *args): return _ccdb_pyllapi.DataProvider_CreateAssignment(self, *args)
    def GetAssignments(self, *args): return _ccdb_pyllapi.DataProvider_GetAssignments(self, *args)
    def UpdateAssignment(self, *args): return _ccdb_pyllapi.DataProvider_UpdateAssignment(self, *args)
    def DeleteAssignment(self, *args): return _ccdb_pyllapi.DataProvider_DeleteAssignment(self, *args)
    def FillAssignment(self, *args): return _ccdb_pyllapi.DataProvider_FillAssignment(self, *args)
    def GetNErrors(self): return _ccdb_pyllapi.DataProvider_GetNErrors(self)
    def GetErrors(self): return _ccdb_pyllapi.DataProvider_GetErrors(self)
    def GetLastError(self): return _ccdb_pyllapi.DataProvider_GetLastError(self)
    def ValidateName(self, *args): return _ccdb_pyllapi.DataProvider_ValidateName(self, *args)
    def GetLogUserName(self): return _ccdb_pyllapi.DataProvider_GetLogUserName(self)
    def SetLogUserName(self, *args): return _ccdb_pyllapi.DataProvider_SetLogUserName(self, *args)
DataProvider_swigregister = _ccdb_pyllapi.DataProvider_swigregister
DataProvider_swigregister(DataProvider)

class MySQLDataProvider(DataProvider):
    __swig_setmethods__ = {}
    for _s in [DataProvider]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MySQLDataProvider, name, value)
    __swig_getmethods__ = {}
    for _s in [DataProvider]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MySQLDataProvider, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ccdb_pyllapi.new_MySQLDataProvider()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccdb_pyllapi.delete_MySQLDataProvider
    __del__ = lambda self : None;
    def Connect(self, *args): return _ccdb_pyllapi.MySQLDataProvider_Connect(self, *args)
    def IsConnected(self): return _ccdb_pyllapi.MySQLDataProvider_IsConnected(self)
    def Disconnect(self): return _ccdb_pyllapi.MySQLDataProvider_Disconnect(self)
    def GetDirectory(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetDirectory(self, *args)
    def GetRootDirectory(self): return _ccdb_pyllapi.MySQLDataProvider_GetRootDirectory(self)
    def SearchDirectories(self, *args): return _ccdb_pyllapi.MySQLDataProvider_SearchDirectories(self, *args)
    def MakeDirectory(self, *args): return _ccdb_pyllapi.MySQLDataProvider_MakeDirectory(self, *args)
    def UpdateDirectory(self, *args): return _ccdb_pyllapi.MySQLDataProvider_UpdateDirectory(self, *args)
    def DeleteDirectory(self, *args): return _ccdb_pyllapi.MySQLDataProvider_DeleteDirectory(self, *args)
    def GetConstantsTypeTable(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetConstantsTypeTable(self, *args)
    def GetConstantsTypeTables(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetConstantsTypeTables(self, *args)
    def SearchConstantsTypeTables(self, *args): return _ccdb_pyllapi.MySQLDataProvider_SearchConstantsTypeTables(self, *args)
    def CountConstantsTypeTables(self, *args): return _ccdb_pyllapi.MySQLDataProvider_CountConstantsTypeTables(self, *args)
    def CreateConstantsTypeTable(self, *args): return _ccdb_pyllapi.MySQLDataProvider_CreateConstantsTypeTable(self, *args)
    def UpdateConstantsTypeTable(self, *args): return _ccdb_pyllapi.MySQLDataProvider_UpdateConstantsTypeTable(self, *args)
    def DeleteConstantsTypeTable(self, *args): return _ccdb_pyllapi.MySQLDataProvider_DeleteConstantsTypeTable(self, *args)
    def LoadColumns(self, *args): return _ccdb_pyllapi.MySQLDataProvider_LoadColumns(self, *args)
    def CreateColumn(self, *args): return _ccdb_pyllapi.MySQLDataProvider_CreateColumn(self, *args)
    def CreateColumns(self, *args): return _ccdb_pyllapi.MySQLDataProvider_CreateColumns(self, *args)
    def CreateRunRange(self, *args): return _ccdb_pyllapi.MySQLDataProvider_CreateRunRange(self, *args)
    def GetRunRange(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetRunRange(self, *args)
    def GetOrCreateRunRange(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetOrCreateRunRange(self, *args)
    def GetRunRanges(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetRunRanges(self, *args)
    def UpdateRunRange(self, *args): return _ccdb_pyllapi.MySQLDataProvider_UpdateRunRange(self, *args)
    def DeleteRunRange(self, *args): return _ccdb_pyllapi.MySQLDataProvider_DeleteRunRange(self, *args)
    def GetVariation(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetVariation(self, *args)
    def GetVariations(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetVariations(self, *args)
    def CreateVariation(self, *args): return _ccdb_pyllapi.MySQLDataProvider_CreateVariation(self, *args)
    def UpdateVariation(self, *args): return _ccdb_pyllapi.MySQLDataProvider_UpdateVariation(self, *args)
    def DeleteVariation(self, *args): return _ccdb_pyllapi.MySQLDataProvider_DeleteVariation(self, *args)
    def GetAssignmentShort(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetAssignmentShort(self, *args)
    def GetAssignmentFull(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetAssignmentFull(self, *args)
    def CreateAssignment(self, *args): return _ccdb_pyllapi.MySQLDataProvider_CreateAssignment(self, *args)
    def GetAssignments(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetAssignments(self, *args)
    def UpdateAssignment(self, *args): return _ccdb_pyllapi.MySQLDataProvider_UpdateAssignment(self, *args)
    def DeleteAssignment(self, *args): return _ccdb_pyllapi.MySQLDataProvider_DeleteAssignment(self, *args)
    def FillAssignment(self, *args): return _ccdb_pyllapi.MySQLDataProvider_FillAssignment(self, *args)
MySQLDataProvider_swigregister = _ccdb_pyllapi.MySQLDataProvider_swigregister
MySQLDataProvider_swigregister(MySQLDataProvider)

class ConstantsTypeTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantsTypeTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantsTypeTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ccdb_pyllapi.new_ConstantsTypeTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccdb_pyllapi.delete_ConstantsTypeTable
    __del__ = lambda self : None;
    def SetDirectory(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_SetDirectory(self, *args)
    def GetDirectory(self): return _ccdb_pyllapi.ConstantsTypeTable_GetDirectory(self)
    def SetDirectoryId(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_SetDirectoryId(self, *args)
    def GetDirectoryId(self): return _ccdb_pyllapi.ConstantsTypeTable_GetDirectoryId(self)
    def SetFullPath(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_SetFullPath(self, *args)
    def GetFullPath(self): return _ccdb_pyllapi.ConstantsTypeTable_GetFullPath(self)
    def SetId(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_SetId(self, *args)
    def GetId(self): return _ccdb_pyllapi.ConstantsTypeTable_GetId(self)
    def SetName(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_SetName(self, *args)
    def GetName(self): return _ccdb_pyllapi.ConstantsTypeTable_GetName(self)
    def GetComment(self): return _ccdb_pyllapi.ConstantsTypeTable_GetComment(self)
    def SetComment(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_SetComment(self, *args)
    def GetCreatedTime(self): return _ccdb_pyllapi.ConstantsTypeTable_GetCreatedTime(self)
    def SetCreatedTime(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_SetCreatedTime(self, *args)
    def GetModifiedTime(self): return _ccdb_pyllapi.ConstantsTypeTable_GetModifiedTime(self)
    def SetModifiedTime(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_SetModifiedTime(self, *args)
    def GetNRows(self): return _ccdb_pyllapi.ConstantsTypeTable_GetNRows(self)
    def SetNRows(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_SetNRows(self, *args)
    def GetNColumns(self): return _ccdb_pyllapi.ConstantsTypeTable_GetNColumns(self)
    def GetNColumnsFromDB(self): return _ccdb_pyllapi.ConstantsTypeTable_GetNColumnsFromDB(self)
    def SetNColumnsFromDB(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_SetNColumnsFromDB(self, *args)
    def GetColumns(self): return _ccdb_pyllapi.ConstantsTypeTable_GetColumns(self)
    def AddColumn(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_AddColumn(self, *args)
    def RemoveColumn(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_RemoveColumn(self, *args)
    def ClearColumns(self): return _ccdb_pyllapi.ConstantsTypeTable_ClearColumns(self)
    def GetColumnNames(self): return _ccdb_pyllapi.ConstantsTypeTable_GetColumnNames(self)
    def GetColumnTypeStrings(self): return _ccdb_pyllapi.ConstantsTypeTable_GetColumnTypeStrings(self)
ConstantsTypeTable_swigregister = _ccdb_pyllapi.ConstantsTypeTable_swigregister
ConstantsTypeTable_swigregister(ConstantsTypeTable)

class ConstantsTypeColumn(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantsTypeColumn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantsTypeColumn, name)
    __repr__ = _swig_repr
    cIntColumn = _ccdb_pyllapi.ConstantsTypeColumn_cIntColumn
    cUIntColumn = _ccdb_pyllapi.ConstantsTypeColumn_cUIntColumn
    cLongColumn = _ccdb_pyllapi.ConstantsTypeColumn_cLongColumn
    cULongColumn = _ccdb_pyllapi.ConstantsTypeColumn_cULongColumn
    cDoubleColumn = _ccdb_pyllapi.ConstantsTypeColumn_cDoubleColumn
    cBoolColumn = _ccdb_pyllapi.ConstantsTypeColumn_cBoolColumn
    cStringColumn = _ccdb_pyllapi.ConstantsTypeColumn_cStringColumn
    __swig_getmethods__["StringToType"] = lambda x: _ccdb_pyllapi.ConstantsTypeColumn_StringToType
    if _newclass:StringToType = staticmethod(_ccdb_pyllapi.ConstantsTypeColumn_StringToType)
    __swig_getmethods__["TypeToString"] = lambda x: _ccdb_pyllapi.ConstantsTypeColumn_TypeToString
    if _newclass:TypeToString = staticmethod(_ccdb_pyllapi.ConstantsTypeColumn_TypeToString)
    def __init__(self, owner = None, provider = None): 
        this = _ccdb_pyllapi.new_ConstantsTypeColumn(owner, provider)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccdb_pyllapi.delete_ConstantsTypeColumn
    __del__ = lambda self : None;
    def GetId(self): return _ccdb_pyllapi.ConstantsTypeColumn_GetId(self)
    def SetId(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn_SetId(self, *args)
    def GetName(self): return _ccdb_pyllapi.ConstantsTypeColumn_GetName(self)
    def SetName(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn_SetName(self, *args)
    def GetComment(self): return _ccdb_pyllapi.ConstantsTypeColumn_GetComment(self)
    def SetComment(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn_SetComment(self, *args)
    def GetCreatedTime(self): return _ccdb_pyllapi.ConstantsTypeColumn_GetCreatedTime(self)
    def SetCreatedTime(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn_SetCreatedTime(self, *args)
    def GetModifiedTime(self): return _ccdb_pyllapi.ConstantsTypeColumn_GetModifiedTime(self)
    def SetModifiedTime(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn_SetModifiedTime(self, *args)
    def GetTypeTableId(self): return _ccdb_pyllapi.ConstantsTypeColumn_GetTypeTableId(self)
    def GetDBTypeTableId(self): return _ccdb_pyllapi.ConstantsTypeColumn_GetDBTypeTableId(self)
    def SetDBTypeTableId(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn_SetDBTypeTableId(self, *args)
    def GetType(self): return _ccdb_pyllapi.ConstantsTypeColumn_GetType(self)
    def GetTypeString(self): return _ccdb_pyllapi.ConstantsTypeColumn_GetTypeString(self)
    def SetType(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn_SetType(self, *args)
    def GetTypeTable(self): return _ccdb_pyllapi.ConstantsTypeColumn_GetTypeTable(self)
    def SetTypeTable(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn_SetTypeTable(self, *args)
    def GetOrder(self): return _ccdb_pyllapi.ConstantsTypeColumn_GetOrder(self)
ConstantsTypeColumn_swigregister = _ccdb_pyllapi.ConstantsTypeColumn_swigregister
ConstantsTypeColumn_swigregister(ConstantsTypeColumn)

def ConstantsTypeColumn_StringToType(*args):
  return _ccdb_pyllapi.ConstantsTypeColumn_StringToType(*args)
ConstantsTypeColumn_StringToType = _ccdb_pyllapi.ConstantsTypeColumn_StringToType

def ConstantsTypeColumn_TypeToString(*args):
  return _ccdb_pyllapi.ConstantsTypeColumn_TypeToString(*args)
ConstantsTypeColumn_TypeToString = _ccdb_pyllapi.ConstantsTypeColumn_TypeToString

class DirectoryVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectoryVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirectoryVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ccdb_pyllapi.DirectoryVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ccdb_pyllapi.DirectoryVector___nonzero__(self)
    def __bool__(self): return _ccdb_pyllapi.DirectoryVector___bool__(self)
    def __len__(self): return _ccdb_pyllapi.DirectoryVector___len__(self)
    def pop(self): return _ccdb_pyllapi.DirectoryVector_pop(self)
    def __getslice__(self, *args): return _ccdb_pyllapi.DirectoryVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ccdb_pyllapi.DirectoryVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ccdb_pyllapi.DirectoryVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ccdb_pyllapi.DirectoryVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ccdb_pyllapi.DirectoryVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ccdb_pyllapi.DirectoryVector___setitem__(self, *args)
    def append(self, *args): return _ccdb_pyllapi.DirectoryVector_append(self, *args)
    def empty(self): return _ccdb_pyllapi.DirectoryVector_empty(self)
    def size(self): return _ccdb_pyllapi.DirectoryVector_size(self)
    def clear(self): return _ccdb_pyllapi.DirectoryVector_clear(self)
    def swap(self, *args): return _ccdb_pyllapi.DirectoryVector_swap(self, *args)
    def get_allocator(self): return _ccdb_pyllapi.DirectoryVector_get_allocator(self)
    def begin(self): return _ccdb_pyllapi.DirectoryVector_begin(self)
    def end(self): return _ccdb_pyllapi.DirectoryVector_end(self)
    def rbegin(self): return _ccdb_pyllapi.DirectoryVector_rbegin(self)
    def rend(self): return _ccdb_pyllapi.DirectoryVector_rend(self)
    def pop_back(self): return _ccdb_pyllapi.DirectoryVector_pop_back(self)
    def erase(self, *args): return _ccdb_pyllapi.DirectoryVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ccdb_pyllapi.new_DirectoryVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ccdb_pyllapi.DirectoryVector_push_back(self, *args)
    def front(self): return _ccdb_pyllapi.DirectoryVector_front(self)
    def back(self): return _ccdb_pyllapi.DirectoryVector_back(self)
    def assign(self, *args): return _ccdb_pyllapi.DirectoryVector_assign(self, *args)
    def resize(self, *args): return _ccdb_pyllapi.DirectoryVector_resize(self, *args)
    def insert(self, *args): return _ccdb_pyllapi.DirectoryVector_insert(self, *args)
    def reserve(self, *args): return _ccdb_pyllapi.DirectoryVector_reserve(self, *args)
    def capacity(self): return _ccdb_pyllapi.DirectoryVector_capacity(self)
    __swig_destroy__ = _ccdb_pyllapi.delete_DirectoryVector
    __del__ = lambda self : None;
DirectoryVector_swigregister = _ccdb_pyllapi.DirectoryVector_swigregister
DirectoryVector_swigregister(DirectoryVector)

class ConstantsTypeTableVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantsTypeTableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantsTypeTableVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ccdb_pyllapi.ConstantsTypeTableVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ccdb_pyllapi.ConstantsTypeTableVector___nonzero__(self)
    def __bool__(self): return _ccdb_pyllapi.ConstantsTypeTableVector___bool__(self)
    def __len__(self): return _ccdb_pyllapi.ConstantsTypeTableVector___len__(self)
    def pop(self): return _ccdb_pyllapi.ConstantsTypeTableVector_pop(self)
    def __getslice__(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector___setitem__(self, *args)
    def append(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_append(self, *args)
    def empty(self): return _ccdb_pyllapi.ConstantsTypeTableVector_empty(self)
    def size(self): return _ccdb_pyllapi.ConstantsTypeTableVector_size(self)
    def clear(self): return _ccdb_pyllapi.ConstantsTypeTableVector_clear(self)
    def swap(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_swap(self, *args)
    def get_allocator(self): return _ccdb_pyllapi.ConstantsTypeTableVector_get_allocator(self)
    def begin(self): return _ccdb_pyllapi.ConstantsTypeTableVector_begin(self)
    def end(self): return _ccdb_pyllapi.ConstantsTypeTableVector_end(self)
    def rbegin(self): return _ccdb_pyllapi.ConstantsTypeTableVector_rbegin(self)
    def rend(self): return _ccdb_pyllapi.ConstantsTypeTableVector_rend(self)
    def pop_back(self): return _ccdb_pyllapi.ConstantsTypeTableVector_pop_back(self)
    def erase(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ccdb_pyllapi.new_ConstantsTypeTableVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_push_back(self, *args)
    def front(self): return _ccdb_pyllapi.ConstantsTypeTableVector_front(self)
    def back(self): return _ccdb_pyllapi.ConstantsTypeTableVector_back(self)
    def assign(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_assign(self, *args)
    def resize(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_resize(self, *args)
    def insert(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_insert(self, *args)
    def reserve(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_reserve(self, *args)
    def capacity(self): return _ccdb_pyllapi.ConstantsTypeTableVector_capacity(self)
    __swig_destroy__ = _ccdb_pyllapi.delete_ConstantsTypeTableVector
    __del__ = lambda self : None;
ConstantsTypeTableVector_swigregister = _ccdb_pyllapi.ConstantsTypeTableVector_swigregister
ConstantsTypeTableVector_swigregister(ConstantsTypeTableVector)

class ConstantsTypeColumnVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantsTypeColumnVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantsTypeColumnVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ccdb_pyllapi.ConstantsTypeColumnVector___nonzero__(self)
    def __bool__(self): return _ccdb_pyllapi.ConstantsTypeColumnVector___bool__(self)
    def __len__(self): return _ccdb_pyllapi.ConstantsTypeColumnVector___len__(self)
    def pop(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_pop(self)
    def __getslice__(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector___setitem__(self, *args)
    def append(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_append(self, *args)
    def empty(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_empty(self)
    def size(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_size(self)
    def clear(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_clear(self)
    def swap(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_swap(self, *args)
    def get_allocator(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_get_allocator(self)
    def begin(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_begin(self)
    def end(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_end(self)
    def rbegin(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_rbegin(self)
    def rend(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_rend(self)
    def pop_back(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_pop_back(self)
    def erase(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ccdb_pyllapi.new_ConstantsTypeColumnVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_push_back(self, *args)
    def front(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_front(self)
    def back(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_back(self)
    def assign(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_assign(self, *args)
    def resize(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_resize(self, *args)
    def insert(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_insert(self, *args)
    def reserve(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_reserve(self, *args)
    def capacity(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_capacity(self)
    __swig_destroy__ = _ccdb_pyllapi.delete_ConstantsTypeColumnVector
    __del__ = lambda self : None;
ConstantsTypeColumnVector_swigregister = _ccdb_pyllapi.ConstantsTypeColumnVector_swigregister
ConstantsTypeColumnVector_swigregister(ConstantsTypeColumnVector)

class StringStringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringStringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringStringMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _ccdb_pyllapi.StringStringMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ccdb_pyllapi.StringStringMap___nonzero__(self)
    def __bool__(self): return _ccdb_pyllapi.StringStringMap___bool__(self)
    def __len__(self): return _ccdb_pyllapi.StringStringMap___len__(self)
    def __getitem__(self, *args): return _ccdb_pyllapi.StringStringMap___getitem__(self, *args)
    def __delitem__(self, *args): return _ccdb_pyllapi.StringStringMap___delitem__(self, *args)
    def has_key(self, *args): return _ccdb_pyllapi.StringStringMap_has_key(self, *args)
    def keys(self): return _ccdb_pyllapi.StringStringMap_keys(self)
    def values(self): return _ccdb_pyllapi.StringStringMap_values(self)
    def items(self): return _ccdb_pyllapi.StringStringMap_items(self)
    def __contains__(self, *args): return _ccdb_pyllapi.StringStringMap___contains__(self, *args)
    def key_iterator(self): return _ccdb_pyllapi.StringStringMap_key_iterator(self)
    def value_iterator(self): return _ccdb_pyllapi.StringStringMap_value_iterator(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args): return _ccdb_pyllapi.StringStringMap___setitem__(self, *args)
    def __init__(self, *args): 
        this = _ccdb_pyllapi.new_StringStringMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _ccdb_pyllapi.StringStringMap_empty(self)
    def size(self): return _ccdb_pyllapi.StringStringMap_size(self)
    def clear(self): return _ccdb_pyllapi.StringStringMap_clear(self)
    def swap(self, *args): return _ccdb_pyllapi.StringStringMap_swap(self, *args)
    def get_allocator(self): return _ccdb_pyllapi.StringStringMap_get_allocator(self)
    def begin(self): return _ccdb_pyllapi.StringStringMap_begin(self)
    def end(self): return _ccdb_pyllapi.StringStringMap_end(self)
    def rbegin(self): return _ccdb_pyllapi.StringStringMap_rbegin(self)
    def rend(self): return _ccdb_pyllapi.StringStringMap_rend(self)
    def count(self, *args): return _ccdb_pyllapi.StringStringMap_count(self, *args)
    def erase(self, *args): return _ccdb_pyllapi.StringStringMap_erase(self, *args)
    def find(self, *args): return _ccdb_pyllapi.StringStringMap_find(self, *args)
    def lower_bound(self, *args): return _ccdb_pyllapi.StringStringMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _ccdb_pyllapi.StringStringMap_upper_bound(self, *args)
    __swig_destroy__ = _ccdb_pyllapi.delete_StringStringMap
    __del__ = lambda self : None;
StringStringMap_swigregister = _ccdb_pyllapi.StringStringMap_swigregister
StringStringMap_swigregister(StringStringMap)



