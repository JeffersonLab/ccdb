# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ccdb_pyllapi', [dirname(__file__)])
        except ImportError:
            import _ccdb_pyllapi
            return _ccdb_pyllapi
        if fp is not None:
            try:
                _mod = imp.load_module('_ccdb_pyllapi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ccdb_pyllapi = swig_import_helper()
    del swig_import_helper
else:
    import _ccdb_pyllapi
del version_info
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

class SwigPyIterator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ccdb_pyllapi.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _ccdb_pyllapi.SwigPyIterator_value(self)
    def incr(self, n = 1): return _ccdb_pyllapi.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _ccdb_pyllapi.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _ccdb_pyllapi.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _ccdb_pyllapi.SwigPyIterator_equal(self, *args)
    def copy(self): return _ccdb_pyllapi.SwigPyIterator_copy(self)
    def next(self): return _ccdb_pyllapi.SwigPyIterator_next(self)
    def __next__(self): return _ccdb_pyllapi.SwigPyIterator___next__(self)
    def previous(self): return _ccdb_pyllapi.SwigPyIterator_previous(self)
    def advance(self, *args): return _ccdb_pyllapi.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _ccdb_pyllapi.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _ccdb_pyllapi.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _ccdb_pyllapi.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _ccdb_pyllapi.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _ccdb_pyllapi.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _ccdb_pyllapi.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _ccdb_pyllapi.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class RunRange:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RunRange, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ccdb_pyllapi.new_RunRange()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccdb_pyllapi.delete_RunRange
    __del__ = lambda self : None;
    def _GetId(self): return _ccdb_pyllapi.RunRange__GetId(self)
    def _GetMax(self): return _ccdb_pyllapi.RunRange__GetMax(self)
    def _GetMin(self): return _ccdb_pyllapi.RunRange__GetMin(self)
    def _GetName(self): return _ccdb_pyllapi.RunRange__GetName(self)
    def _GetComment(self): return _ccdb_pyllapi.RunRange__GetComment(self)
    def _SetId(self, *args): return _ccdb_pyllapi.RunRange__SetId(self, *args)
    def _SetMax(self, *args): return _ccdb_pyllapi.RunRange__SetMax(self, *args)
    def _SetMin(self, *args): return _ccdb_pyllapi.RunRange__SetMin(self, *args)
    def _SetName(self, *args): return _ccdb_pyllapi.RunRange__SetName(self, *args)
    def _SetComment(self, *args): return _ccdb_pyllapi.RunRange__SetComment(self, *args)
    def set_range(self, *args): return _ccdb_pyllapi.RunRange_set_range(self, *args)
    def _GetCreatedTime(self): return _ccdb_pyllapi.RunRange__GetCreatedTime(self)
    def _SetCreatedTime(self, *args): return _ccdb_pyllapi.RunRange__SetCreatedTime(self, *args)
    def _GetModifiedTime(self): return _ccdb_pyllapi.RunRange__GetModifiedTime(self)
    def _SetModifiedTime(self, *args): return _ccdb_pyllapi.RunRange__SetModifiedTime(self, *args)
    __swig_getmethods__["db_id"] = _GetId
    __swig_setmethods__["db_id"] = _SetId
    db_id  = property(_GetId, _SetId)

    __swig_getmethods__["max"] = _GetMax
    __swig_setmethods__["max"] = _SetMax
    max  = property(_GetMax, _SetMax)

    __swig_getmethods__["min"] = _GetMin
    __swig_setmethods__["min"] = _SetMin
    min  = property(_GetMin, _SetMin)

    __swig_getmethods__["name"] = _GetName
    __swig_setmethods__["name"] = _SetName
    name  = property(_GetName, _SetName)

    __swig_getmethods__["comment"] = _GetComment
    __swig_setmethods__["comment"] = _SetComment
    comment  = property(_GetComment, _SetComment)

    __swig_getmethods__["created_time"] = _GetCreatedTime
    __swig_setmethods__["created_time"] = _SetCreatedTime
    created_time  = property(_GetCreatedTime, _SetCreatedTime)

    __swig_getmethods__["modified_time"] = _GetModifiedTime
    __swig_setmethods__["modified_time"] = _SetModifiedTime
    modified_time  = property(_GetModifiedTime, _SetModifiedTime)

RunRange_swigregister = _ccdb_pyllapi.RunRange_swigregister
RunRange_swigregister(RunRange)

class Variation:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Variation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ccdb_pyllapi.new_Variation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccdb_pyllapi.delete_Variation
    __del__ = lambda self : None;
    def _GetId(self): return _ccdb_pyllapi.Variation__GetId(self)
    def _SetId(self, *args): return _ccdb_pyllapi.Variation__SetId(self, *args)
    def _GetName(self): return _ccdb_pyllapi.Variation__GetName(self)
    def _SetName(self, *args): return _ccdb_pyllapi.Variation__SetName(self, *args)
    def _GetComment(self): return _ccdb_pyllapi.Variation__GetComment(self)
    def _SetComment(self, *args): return _ccdb_pyllapi.Variation__SetComment(self, *args)
    def _GetCreatedTime(self): return _ccdb_pyllapi.Variation__GetCreatedTime(self)
    def _SetCreatedTime(self, *args): return _ccdb_pyllapi.Variation__SetCreatedTime(self, *args)
    def _GetModifiedTime(self): return _ccdb_pyllapi.Variation__GetModifiedTime(self)
    def _SetModifiedTime(self, *args): return _ccdb_pyllapi.Variation__SetModifiedTime(self, *args)
    def _GetDescription(self): return _ccdb_pyllapi.Variation__GetDescription(self)
    def _SetDescription(self, *args): return _ccdb_pyllapi.Variation__SetDescription(self, *args)
    __swig_getmethods__["db_id"] = _GetId
    __swig_setmethods__["db_id"] = _SetId
    db_id  = property(_GetId, _SetId)

    __swig_getmethods__["name"] = _GetName
    __swig_setmethods__["name"] = _SetName
    name = property(_GetName, _SetName)

    __swig_getmethods__["comment"] = _GetComment
    __swig_setmethods__["comment"] = _SetComment
    comment = property(_GetComment, _SetComment)

    __swig_getmethods__["created_time"] = _GetCreatedTime
    __swig_setmethods__["created_time"] = _SetCreatedTime
    created_time  = property(_GetCreatedTime, _SetCreatedTime)

    __swig_getmethods__["modified_time"] = _GetModifiedTime 
    __swig_setmethods__["modified_time"] = _SetModifiedTime
    modified_time  = property(_GetModifiedTime, _SetModifiedTime)

    __swig_getmethods__["description"] = _GetDescription
    __swig_setmethods__["description"] = _SetDescription
    description = property(_GetDescription, _SetDescription)


Variation_swigregister = _ccdb_pyllapi.Variation_swigregister
Variation_swigregister(Variation)

class Directory:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Directory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Directory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ccdb_pyllapi.new_Directory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccdb_pyllapi.delete_Directory
    __del__ = lambda self : None;
    def _GetParentDirectory(self): return _ccdb_pyllapi.Directory__GetParentDirectory(self)
    def _GetSubdirectories(self): return _ccdb_pyllapi.Directory__GetSubdirectories(self)
    def add_subdirectory(self, *args): return _ccdb_pyllapi.Directory_add_subdirectory(self, *args)
    def dispose_subdirectories(self): return _ccdb_pyllapi.Directory_dispose_subdirectories(self)
    def _GetId(self): return _ccdb_pyllapi.Directory__GetId(self)
    def _SetId(self, *args): return _ccdb_pyllapi.Directory__SetId(self, *args)
    def get_parent_db_id(self): return _ccdb_pyllapi.Directory_get_parent_db_id(self)
    def set_parent_db_id(self, *args): return _ccdb_pyllapi.Directory_set_parent_db_id(self, *args)
    def _GetName(self): return _ccdb_pyllapi.Directory__GetName(self)
    def _SetName(self, *args): return _ccdb_pyllapi.Directory__SetName(self, *args)
    def _GetFullPath(self): return _ccdb_pyllapi.Directory__GetFullPath(self)
    def _SetFullPath(self, *args): return _ccdb_pyllapi.Directory__SetFullPath(self, *args)
    def _GetCreatedTime(self): return _ccdb_pyllapi.Directory__GetCreatedTime(self)
    def _SetCreatedTime(self, *args): return _ccdb_pyllapi.Directory__SetCreatedTime(self, *args)
    def _GetModifiedTime(self): return _ccdb_pyllapi.Directory__GetModifiedTime(self)
    def _SetModifiedTime(self, *args): return _ccdb_pyllapi.Directory__SetModifiedTime(self, *args)
    def _GetComment(self): return _ccdb_pyllapi.Directory__GetComment(self)
    def _SetComment(self, *args): return _ccdb_pyllapi.Directory__SetComment(self, *args)
    __swig_getmethods__["parent_dir"] = _GetParentDirectory
    parent_dir  = property(_GetParentDirectory)

    __swig_getmethods__["subdirs"] = _GetSubdirectories
    subdirs  = property(_GetSubdirectories)
        
    __swig_getmethods__["db_id"] = _GetId
    __swig_setmethods__["db_id"] = _SetId
    db_id  = property(_GetId, _SetId)

    __swig_getmethods__["name"] = _GetName
    __swig_setmethods__["name"] = _SetName
    name  = property(_GetName, _SetName)

    __swig_getmethods__["full_path"] = _GetFullPath
    __swig_setmethods__["full_path"] = _SetFullPath
    full_path  = property(_GetFullPath, _SetFullPath)

    __swig_getmethods__["created_time"] = _GetCreatedTime
    __swig_setmethods__["created_time"] = _SetCreatedTime
    created_time  = property(_GetCreatedTime, _SetCreatedTime)

    __swig_getmethods__["modified_time"] = _GetModifiedTime
    __swig_setmethods__["modified_time"] = _SetModifiedTime
    modified_time  = property(_GetModifiedTime, _SetModifiedTime)

    __swig_getmethods__["comment"] = _GetComment
    __swig_setmethods__["comment"] = _SetComment
    comment  = property(_GetComment, _SetComment)

Directory_swigregister = _ccdb_pyllapi.Directory_swigregister
Directory_swigregister(Directory)

class ConstantsTypeTable:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantsTypeTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantsTypeTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ccdb_pyllapi.new_ConstantsTypeTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccdb_pyllapi.delete_ConstantsTypeTable
    __del__ = lambda self : None;
    def _SetDirectory(self, *args): return _ccdb_pyllapi.ConstantsTypeTable__SetDirectory(self, *args)
    def _GetDirectory(self): return _ccdb_pyllapi.ConstantsTypeTable__GetDirectory(self)
    def set_directory_id(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_set_directory_id(self, *args)
    def get_directory_id(self): return _ccdb_pyllapi.ConstantsTypeTable_get_directory_id(self)
    def _SetFullPath(self, *args): return _ccdb_pyllapi.ConstantsTypeTable__SetFullPath(self, *args)
    def _GetFullPath(self): return _ccdb_pyllapi.ConstantsTypeTable__GetFullPath(self)
    def _SetId(self, *args): return _ccdb_pyllapi.ConstantsTypeTable__SetId(self, *args)
    def _GetId(self): return _ccdb_pyllapi.ConstantsTypeTable__GetId(self)
    def _SetName(self, *args): return _ccdb_pyllapi.ConstantsTypeTable__SetName(self, *args)
    def _GetName(self): return _ccdb_pyllapi.ConstantsTypeTable__GetName(self)
    def _GetComment(self): return _ccdb_pyllapi.ConstantsTypeTable__GetComment(self)
    def _SetComment(self, *args): return _ccdb_pyllapi.ConstantsTypeTable__SetComment(self, *args)
    def _GetCreatedTime(self): return _ccdb_pyllapi.ConstantsTypeTable__GetCreatedTime(self)
    def _SetCreatedTime(self, *args): return _ccdb_pyllapi.ConstantsTypeTable__SetCreatedTime(self, *args)
    def _GetModifiedTime(self): return _ccdb_pyllapi.ConstantsTypeTable__GetModifiedTime(self)
    def _SetModifiedTime(self, *args): return _ccdb_pyllapi.ConstantsTypeTable__SetModifiedTime(self, *args)
    def _GetNRows(self): return _ccdb_pyllapi.ConstantsTypeTable__GetNRows(self)
    def _SetNRows(self, *args): return _ccdb_pyllapi.ConstantsTypeTable__SetNRows(self, *args)
    def _GetNColumns(self): return _ccdb_pyllapi.ConstantsTypeTable__GetNColumns(self)
    def get_db_num_columns(self): return _ccdb_pyllapi.ConstantsTypeTable_get_db_num_columns(self)
    def set_db_num_columns(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_set_db_num_columns(self, *args)
    def _GetColumns(self): return _ccdb_pyllapi.ConstantsTypeTable__GetColumns(self)
    def add_column_in_order(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_add_column_in_order(self, *args)
    def add_column(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_add_column(self, *args)
    def remove_column(self, *args): return _ccdb_pyllapi.ConstantsTypeTable_remove_column(self, *args)
    def clear_columns(self): return _ccdb_pyllapi.ConstantsTypeTable_clear_columns(self)
    def _GetColumnNames(self): return _ccdb_pyllapi.ConstantsTypeTable__GetColumnNames(self)
    def _GetColumnTypeStrings(self): return _ccdb_pyllapi.ConstantsTypeTable__GetColumnTypeStrings(self)
    def get_column_names(self):
        return [n for n in self._GetColumnNames()]

    def get_column_types(self):
        return [t for t in self._GetColumnTypeStrings()];

    __swig_getmethods__["parent_dir"] = _GetDirectory
    __swig_setmethods__["parent_dir"] = _SetDirectory
    parent_dir  = property(_GetDirectory, _SetDirectory)

    __swig_getmethods__["full_path"] = _GetFullPath
    __swig_setmethods__["full_path"] = _SetFullPath
    full_path  = property(_GetFullPath, _SetFullPath)

    __swig_getmethods__["db_id"] = _SetId
    __swig_setmethods__["db_id"] = _GetId
    db_id  = property(_SetId, _GetId)

    __swig_getmethods__["name"] = _GetName
    __swig_setmethods__["name"] = _SetName
    name  = property(_GetName, _SetName)

    __swig_getmethods__["comment"] = _GetComment
    __swig_setmethods__["comment"] = _SetComment
    comment  = property(_GetComment, _SetComment)

    __swig_getmethods__["created_time"] = _GetCreatedTime
    __swig_setmethods__["created_time"] = _SetCreatedTime
    created_time  = property(_GetCreatedTime, _SetCreatedTime)

    __swig_getmethods__["modified_time"] = _GetModifiedTime
    __swig_setmethods__["modified_time"] = _SetModifiedTime
    modified_time  = property(_GetModifiedTime, _SetModifiedTime)

    __swig_getmethods__["nrows"] = _GetNRows
    __swig_setmethods__["nrows"] = _SetNRows
    nrows  = property(_GetNRows, _SetNRows)

    __swig_getmethods__["ncolumns"] = _GetNColumns
    ncolumns  = property(_GetNColumns)

    def _get_columns_list(self):
        return [col for col in self._GetColumns()]

    __swig_getmethods__["columns"] = _get_columns_list
    columns  = property(_get_columns_list)

ConstantsTypeTable_swigregister = _ccdb_pyllapi.ConstantsTypeTable_swigregister
ConstantsTypeTable_swigregister(ConstantsTypeTable)

class ConstantsTypeColumn:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantsTypeColumn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantsTypeColumn, name)
    __repr__ = _swig_repr
    cIntColumn = _ccdb_pyllapi.ConstantsTypeColumn_cIntColumn
    cUIntColumn = _ccdb_pyllapi.ConstantsTypeColumn_cUIntColumn
    cLongColumn = _ccdb_pyllapi.ConstantsTypeColumn_cLongColumn
    cULongColumn = _ccdb_pyllapi.ConstantsTypeColumn_cULongColumn
    cDoubleColumn = _ccdb_pyllapi.ConstantsTypeColumn_cDoubleColumn
    cBoolColumn = _ccdb_pyllapi.ConstantsTypeColumn_cBoolColumn
    cStringColumn = _ccdb_pyllapi.ConstantsTypeColumn_cStringColumn
    __swig_getmethods__["StringToType"] = lambda x: _ccdb_pyllapi.ConstantsTypeColumn_StringToType
    __swig_getmethods__["TypeToString"] = lambda x: _ccdb_pyllapi.ConstantsTypeColumn_TypeToString
    def __init__(self, owner = None, provider = None): 
        this = _ccdb_pyllapi.new_ConstantsTypeColumn(owner, provider)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccdb_pyllapi.delete_ConstantsTypeColumn
    __del__ = lambda self : None;
    def _GetId(self): return _ccdb_pyllapi.ConstantsTypeColumn__GetId(self)
    def _SetId(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn__SetId(self, *args)
    def _GetName(self): return _ccdb_pyllapi.ConstantsTypeColumn__GetName(self)
    def _SetName(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn__SetName(self, *args)
    def _GetComment(self): return _ccdb_pyllapi.ConstantsTypeColumn__GetComment(self)
    def _SetComment(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn__SetComment(self, *args)
    def _GetCreatedTime(self): return _ccdb_pyllapi.ConstantsTypeColumn__GetCreatedTime(self)
    def _SetCreatedTime(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn__SetCreatedTime(self, *args)
    def _GetModifiedTime(self): return _ccdb_pyllapi.ConstantsTypeColumn__GetModifiedTime(self)
    def _SetModifiedTime(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn__SetModifiedTime(self, *args)
    def _GetTypeTableId(self): return _ccdb_pyllapi.ConstantsTypeColumn__GetTypeTableId(self)
    def get_dB_type_table_id(self): return _ccdb_pyllapi.ConstantsTypeColumn_get_dB_type_table_id(self)
    def aet_dB_type_table_id(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn_aet_dB_type_table_id(self, *args)
    def _GetType(self): return _ccdb_pyllapi.ConstantsTypeColumn__GetType(self)
    def _SetType(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn__SetType(self, *args)
    def _GetTypeTable(self): return _ccdb_pyllapi.ConstantsTypeColumn__GetTypeTable(self)
    def _SetTypeTable(self, *args): return _ccdb_pyllapi.ConstantsTypeColumn__SetTypeTable(self, *args)
    def _GetOrder(self): return _ccdb_pyllapi.ConstantsTypeColumn__GetOrder(self)
    __swig_getmethods__["db_id"] = _GetId
    __swig_setmethods__["db_id"] = _SetId
    db_id  = property(_GetId, _SetId)

    __swig_getmethods__["name"] = _GetName
    __swig_setmethods__["name"] = _SetName
    name  = property(_GetName, _SetName)

    __swig_getmethods__["comment"] = _GetComment
    __swig_setmethods__["comment"] = _SetComment
    comment  = property(_GetComment, _SetComment)

    __swig_getmethods__["created_time"] = _GetCreatedTime
    __swig_setmethods__["created_time"] = _SetCreatedTime
    created_time  = property(_GetCreatedTime, _SetCreatedTime)

    __swig_getmethods__["modified_time"] = _GetModifiedTime
    __swig_setmethods__["modified_time"] = _SetModifiedTime
    modified_time  = property(_GetModifiedTime, _SetModifiedTime)

    __swig_getmethods__["column_type"] = _GetType
    __swig_setmethods__["column_type"] = _SetType
    column_type  = property(_GetType, _SetType)


    __swig_getmethods__["type_table"] = _GetTypeTable
    __swig_setmethods__["type_table"] = _SetTypeTable
    type_table  = property(_GetTypeTable, _SetTypeTable)

    __swig_getmethods__["order"] = _GetOrder
    order  = property(_GetOrder)

ConstantsTypeColumn_swigregister = _ccdb_pyllapi.ConstantsTypeColumn_swigregister
ConstantsTypeColumn_swigregister(ConstantsTypeColumn)

def ConstantsTypeColumn_StringToType(*args):
  return _ccdb_pyllapi.ConstantsTypeColumn_StringToType(*args)
ConstantsTypeColumn_StringToType = _ccdb_pyllapi.ConstantsTypeColumn_StringToType

def ConstantsTypeColumn_TypeToString(*args):
  return _ccdb_pyllapi.ConstantsTypeColumn_TypeToString(*args)
ConstantsTypeColumn_TypeToString = _ccdb_pyllapi.ConstantsTypeColumn_TypeToString

class Assignment:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Assignment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Assignment, name)
    __repr__ = _swig_repr
    def __init__(self, owner = None, provider = None): 
        this = _ccdb_pyllapi.new_Assignment(owner, provider)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccdb_pyllapi.delete_Assignment
    __del__ = lambda self : None;
    def get_db_variation_id(self): return _ccdb_pyllapi.Assignment_get_db_variation_id(self)
    def set_db_variation_id(self, *args): return _ccdb_pyllapi.Assignment_set_db_variation_id(self, *args)
    def get_db_run_range_id(self): return _ccdb_pyllapi.Assignment_get_db_run_range_id(self)
    def set_db_run_range_id(self, *args): return _ccdb_pyllapi.Assignment_set_db_run_range_id(self, *args)
    def get_db_data_vault_id(self): return _ccdb_pyllapi.Assignment_get_db_data_vault_id(self)
    def set_db_data_vault_id(self, *args): return _ccdb_pyllapi.Assignment_set_db_data_vault_id(self, *args)
    def get_db_event_range_id(self): return _ccdb_pyllapi.Assignment_get_db_event_range_id(self)
    def set_db_event_range_id(self, *args): return _ccdb_pyllapi.Assignment_set_db_event_range_id(self, *args)
    def get_db_requested_run(self): return _ccdb_pyllapi.Assignment_get_db_requested_run(self)
    def set_db_requested_run(self, *args): return _ccdb_pyllapi.Assignment_set_db_requested_run(self, *args)
    def _GetRunRange(self): return _ccdb_pyllapi.Assignment__GetRunRange(self)
    def _SetRunRange(self, *args): return _ccdb_pyllapi.Assignment__SetRunRange(self, *args)
    def _GetEventRange(self): return _ccdb_pyllapi.Assignment__GetEventRange(self)
    def _SetEventRange(self, *args): return _ccdb_pyllapi.Assignment__SetEventRange(self, *args)
    def _GetVariation(self): return _ccdb_pyllapi.Assignment__GetVariation(self)
    def _SetVariation(self, *args): return _ccdb_pyllapi.Assignment__SetVariation(self, *args)
    def _GetId(self): return _ccdb_pyllapi.Assignment__GetId(self)
    def _SetId(self, *args): return _ccdb_pyllapi.Assignment__SetId(self, *args)
    def _GetCreatedTime(self): return _ccdb_pyllapi.Assignment__GetCreatedTime(self)
    def _SetCreatedTime(self, *args): return _ccdb_pyllapi.Assignment__SetCreatedTime(self, *args)
    def _GetModifiedTime(self): return _ccdb_pyllapi.Assignment__GetModifiedTime(self)
    def _SetModifiedTime(self, *args): return _ccdb_pyllapi.Assignment__SetModifiedTime(self, *args)
    def _GetRawData(self): return _ccdb_pyllapi.Assignment__GetRawData(self)
    def _SetRawData(self, *args): return _ccdb_pyllapi.Assignment__SetRawData(self, *args)
    def _GetComment(self): return _ccdb_pyllapi.Assignment__GetComment(self)
    def _SetComment(self, *args): return _ccdb_pyllapi.Assignment__SetComment(self, *args)
    def _GetMappedData(self): return _ccdb_pyllapi.Assignment__GetMappedData(self)
    def _GetVectorData(self): return _ccdb_pyllapi.Assignment__GetVectorData(self)
    def _GetData(self): return _ccdb_pyllapi.Assignment__GetData(self)
    def _SetTypeTable(self, *args): return _ccdb_pyllapi.Assignment__SetTypeTable(self, *args)
    def _GetTypeTable(self): return _ccdb_pyllapi.Assignment__GetTypeTable(self)
    __swig_getmethods__["run_range"] = _GetRunRange
    __swig_setmethods__["run_range"] = _SetRunRange
    run_range  = property(_GetRunRange, _SetRunRange)

    __swig_getmethods__["event_range"] = _GetEventRange
    __swig_setmethods__["event_range"] = _SetEventRange
    event_range  = property(_GetEventRange, _SetEventRange)

    __swig_getmethods__["variation"] = _GetVariation
    __swig_setmethods__["variation"] = _SetVariation
    variation  = property(_GetVariation, _SetVariation)

    __swig_getmethods__["type_table"] = _GetTypeTable
    __swig_setmethods__["type_table"] = _SetTypeTable
    type_table  = property(_GetTypeTable, _SetTypeTable)

    __swig_getmethods__["db_id"] = _GetId
    __swig_setmethods__["db_id"] = _SetId
    db_id  = property(_GetId, _SetId)

    __swig_getmethods__["created_time"] = _GetCreatedTime
    __swig_setmethods__["created_time"] = _SetCreatedTime
    created_time  = property(_GetCreatedTime, _SetCreatedTime)

    __swig_getmethods__["modified_time"] = _GetModifiedTime
    __swig_setmethods__["modified_time"] = _SetModifiedTime
    modified_time  = property(_GetModifiedTime, _SetModifiedTime)

    __swig_getmethods__["raw_data"] = _GetRawData
    __swig_setmethods__["raw_data"] = _SetRawData
    raw_data  = property(_GetRawData, _SetRawData)

    __swig_getmethods__["comment"] = _GetComment
    __swig_setmethods__["comment"] = _SetComment
    comment  = property(_GetComment, _SetComment)


    def _get_data(self):
        rows_vector = self._GetData()
        result = []
        for row in rows_vector:
            result.append([cell for cell in row])
        return result

    __swig_getmethods__["data"] = _get_data
    data  = property(_get_data)

    def _get_data_list(self):
        return [cell for cell in self._GetVectorData()]
    __swig_getmethods__["data_list"] = _get_data_list
    data_list  = property(_get_data_list)


    def _get_data_by_columns(self):
        rows_vector = self._GetMappedData()
        result = []
        for row in rows_vector:
            line = {}
            for col_name, value in row.items():
                line[col_name]=value
            result.append(line)
        return result

    __swig_getmethods__["data_by_columns"] = _get_data_by_columns
    data_by_columns  = property(_get_data_by_columns)



Assignment_swigregister = _ccdb_pyllapi.Assignment_swigregister
Assignment_swigregister(Assignment)

class DataProvider:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataProvider, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ccdb_pyllapi.delete_DataProvider
    __del__ = lambda self : None;
    def Connect(self, *args): return _ccdb_pyllapi.DataProvider_Connect(self, *args)
    def Disconnect(self): return _ccdb_pyllapi.DataProvider_Disconnect(self)
    def IsConnected(self): return _ccdb_pyllapi.DataProvider_IsConnected(self)
    def GetConnectionString(self): return _ccdb_pyllapi.DataProvider_GetConnectionString(self)
    def GetDirectory(self, *args): return _ccdb_pyllapi.DataProvider_GetDirectory(self, *args)
    def GetRootDirectory(self): return _ccdb_pyllapi.DataProvider_GetRootDirectory(self)
    def SearchDirectories(self, *args): return _ccdb_pyllapi.DataProvider_SearchDirectories(self, *args)
    def MakeDirectory(self, *args): return _ccdb_pyllapi.DataProvider_MakeDirectory(self, *args)
    def UpdateDirectory(self, *args): return _ccdb_pyllapi.DataProvider_UpdateDirectory(self, *args)
    def DeleteDirectory(self, *args): return _ccdb_pyllapi.DataProvider_DeleteDirectory(self, *args)
    def GetConstantsTypeTable(self, *args): return _ccdb_pyllapi.DataProvider_GetConstantsTypeTable(self, *args)
    def GetConstantsTypeTables(self, *args): return _ccdb_pyllapi.DataProvider_GetConstantsTypeTables(self, *args)
    def SearchConstantsTypeTables(self, *args): return _ccdb_pyllapi.DataProvider_SearchConstantsTypeTables(self, *args)
    def CountConstantsTypeTables(self, *args): return _ccdb_pyllapi.DataProvider_CountConstantsTypeTables(self, *args)
    def LoadColumns(self, *args): return _ccdb_pyllapi.DataProvider_LoadColumns(self, *args)
    def CreateConstantsTypeTable(self, *args): return _ccdb_pyllapi.DataProvider_CreateConstantsTypeTable(self, *args)
    def UpdateConstantsTypeTable(self, *args): return _ccdb_pyllapi.DataProvider_UpdateConstantsTypeTable(self, *args)
    def DeleteConstantsTypeTable(self, *args): return _ccdb_pyllapi.DataProvider_DeleteConstantsTypeTable(self, *args)
    def CreateRunRange(self, *args): return _ccdb_pyllapi.DataProvider_CreateRunRange(self, *args)
    def GetRunRanges(self, *args): return _ccdb_pyllapi.DataProvider_GetRunRanges(self, *args)
    def GetRunRange(self, *args): return _ccdb_pyllapi.DataProvider_GetRunRange(self, *args)
    def GetOrCreateRunRange(self, *args): return _ccdb_pyllapi.DataProvider_GetOrCreateRunRange(self, *args)
    def UpdateRunRange(self, *args): return _ccdb_pyllapi.DataProvider_UpdateRunRange(self, *args)
    def DeleteRunRange(self, *args): return _ccdb_pyllapi.DataProvider_DeleteRunRange(self, *args)
    def GetVariation(self, *args): return _ccdb_pyllapi.DataProvider_GetVariation(self, *args)
    def GetVariations(self, *args): return _ccdb_pyllapi.DataProvider_GetVariations(self, *args)
    def CreateVariation(self, *args): return _ccdb_pyllapi.DataProvider_CreateVariation(self, *args)
    def UpdateVariation(self, *args): return _ccdb_pyllapi.DataProvider_UpdateVariation(self, *args)
    def DeleteVariation(self, *args): return _ccdb_pyllapi.DataProvider_DeleteVariation(self, *args)
    def GetAssignmentShort(self, *args): return _ccdb_pyllapi.DataProvider_GetAssignmentShort(self, *args)
    def GetAssignmentShortByVersion(self, *args): return _ccdb_pyllapi.DataProvider_GetAssignmentShortByVersion(self, *args)
    def GetAssignmentFull(self, *args): return _ccdb_pyllapi.DataProvider_GetAssignmentFull(self, *args)
    def CreateAssignment(self, *args): return _ccdb_pyllapi.DataProvider_CreateAssignment(self, *args)
    def GetAssignments(self, *args): return _ccdb_pyllapi.DataProvider_GetAssignments(self, *args)
    def UpdateAssignment(self, *args): return _ccdb_pyllapi.DataProvider_UpdateAssignment(self, *args)
    def DeleteAssignment(self, *args): return _ccdb_pyllapi.DataProvider_DeleteAssignment(self, *args)
    def FillAssignment(self, *args): return _ccdb_pyllapi.DataProvider_FillAssignment(self, *args)
    def GetNErrors(self): return _ccdb_pyllapi.DataProvider_GetNErrors(self)
    def GetErrors(self): return _ccdb_pyllapi.DataProvider_GetErrors(self)
    def GetLastError(self): return _ccdb_pyllapi.DataProvider_GetLastError(self)
    def Error(self, *args): return _ccdb_pyllapi.DataProvider_Error(self, *args)
    def Warning(self, *args): return _ccdb_pyllapi.DataProvider_Warning(self, *args)
    def ValidateName(self, *args): return _ccdb_pyllapi.DataProvider_ValidateName(self, *args)
    def GetLogUserName(self): return _ccdb_pyllapi.DataProvider_GetLogUserName(self)
    def SetLogUserName(self, *args): return _ccdb_pyllapi.DataProvider_SetLogUserName(self, *args)
DataProvider_swigregister = _ccdb_pyllapi.DataProvider_swigregister
DataProvider_swigregister(DataProvider)

class MySQLDataProvider(DataProvider):
    __swig_setmethods__ = {}
    for _s in [DataProvider]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MySQLDataProvider, name, value)
    __swig_getmethods__ = {}
    for _s in [DataProvider]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MySQLDataProvider, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ccdb_pyllapi.new_MySQLDataProvider()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ccdb_pyllapi.delete_MySQLDataProvider
    __del__ = lambda self : None;
    def Connect(self, *args): return _ccdb_pyllapi.MySQLDataProvider_Connect(self, *args)
    def IsConnected(self): return _ccdb_pyllapi.MySQLDataProvider_IsConnected(self)
    def Disconnect(self): return _ccdb_pyllapi.MySQLDataProvider_Disconnect(self)
    def GetDirectory(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetDirectory(self, *args)
    def GetRootDirectory(self): return _ccdb_pyllapi.MySQLDataProvider_GetRootDirectory(self)
    def SearchDirectories(self, *args): return _ccdb_pyllapi.MySQLDataProvider_SearchDirectories(self, *args)
    def MakeDirectory(self, *args): return _ccdb_pyllapi.MySQLDataProvider_MakeDirectory(self, *args)
    def UpdateDirectory(self, *args): return _ccdb_pyllapi.MySQLDataProvider_UpdateDirectory(self, *args)
    def DeleteDirectory(self, *args): return _ccdb_pyllapi.MySQLDataProvider_DeleteDirectory(self, *args)
    def GetConstantsTypeTable(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetConstantsTypeTable(self, *args)
    def GetConstantsTypeTables(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetConstantsTypeTables(self, *args)
    def SearchConstantsTypeTables(self, *args): return _ccdb_pyllapi.MySQLDataProvider_SearchConstantsTypeTables(self, *args)
    def CountConstantsTypeTables(self, *args): return _ccdb_pyllapi.MySQLDataProvider_CountConstantsTypeTables(self, *args)
    def CreateConstantsTypeTable(self, *args): return _ccdb_pyllapi.MySQLDataProvider_CreateConstantsTypeTable(self, *args)
    def UpdateConstantsTypeTable(self, *args): return _ccdb_pyllapi.MySQLDataProvider_UpdateConstantsTypeTable(self, *args)
    def DeleteConstantsTypeTable(self, *args): return _ccdb_pyllapi.MySQLDataProvider_DeleteConstantsTypeTable(self, *args)
    def LoadColumns(self, *args): return _ccdb_pyllapi.MySQLDataProvider_LoadColumns(self, *args)
    def CreateColumn(self, *args): return _ccdb_pyllapi.MySQLDataProvider_CreateColumn(self, *args)
    def CreateColumns(self, *args): return _ccdb_pyllapi.MySQLDataProvider_CreateColumns(self, *args)
    def CreateRunRange(self, *args): return _ccdb_pyllapi.MySQLDataProvider_CreateRunRange(self, *args)
    def GetRunRange(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetRunRange(self, *args)
    def GetOrCreateRunRange(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetOrCreateRunRange(self, *args)
    def GetRunRanges(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetRunRanges(self, *args)
    def UpdateRunRange(self, *args): return _ccdb_pyllapi.MySQLDataProvider_UpdateRunRange(self, *args)
    def DeleteRunRange(self, *args): return _ccdb_pyllapi.MySQLDataProvider_DeleteRunRange(self, *args)
    def GetVariation(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetVariation(self, *args)
    def GetVariations(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetVariations(self, *args)
    def CreateVariation(self, *args): return _ccdb_pyllapi.MySQLDataProvider_CreateVariation(self, *args)
    def UpdateVariation(self, *args): return _ccdb_pyllapi.MySQLDataProvider_UpdateVariation(self, *args)
    def DeleteVariation(self, *args): return _ccdb_pyllapi.MySQLDataProvider_DeleteVariation(self, *args)
    def GetAssignmentShort(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetAssignmentShort(self, *args)
    def GetAssignmentFull(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetAssignmentFull(self, *args)
    def CreateAssignment(self, *args): return _ccdb_pyllapi.MySQLDataProvider_CreateAssignment(self, *args)
    def GetAssignments(self, *args): return _ccdb_pyllapi.MySQLDataProvider_GetAssignments(self, *args)
    def UpdateAssignment(self, *args): return _ccdb_pyllapi.MySQLDataProvider_UpdateAssignment(self, *args)
    def DeleteAssignment(self, *args): return _ccdb_pyllapi.MySQLDataProvider_DeleteAssignment(self, *args)
    def FillAssignment(self, *args): return _ccdb_pyllapi.MySQLDataProvider_FillAssignment(self, *args)
MySQLDataProvider_swigregister = _ccdb_pyllapi.MySQLDataProvider_swigregister
MySQLDataProvider_swigregister(MySQLDataProvider)

class AssignmentVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssignmentVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AssignmentVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ccdb_pyllapi.AssignmentVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ccdb_pyllapi.AssignmentVector___nonzero__(self)
    def __bool__(self): return _ccdb_pyllapi.AssignmentVector___bool__(self)
    def __len__(self): return _ccdb_pyllapi.AssignmentVector___len__(self)
    def pop(self): return _ccdb_pyllapi.AssignmentVector_pop(self)
    def __getslice__(self, *args): return _ccdb_pyllapi.AssignmentVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ccdb_pyllapi.AssignmentVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ccdb_pyllapi.AssignmentVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ccdb_pyllapi.AssignmentVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ccdb_pyllapi.AssignmentVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ccdb_pyllapi.AssignmentVector___setitem__(self, *args)
    def append(self, *args): return _ccdb_pyllapi.AssignmentVector_append(self, *args)
    def empty(self): return _ccdb_pyllapi.AssignmentVector_empty(self)
    def size(self): return _ccdb_pyllapi.AssignmentVector_size(self)
    def clear(self): return _ccdb_pyllapi.AssignmentVector_clear(self)
    def swap(self, *args): return _ccdb_pyllapi.AssignmentVector_swap(self, *args)
    def get_allocator(self): return _ccdb_pyllapi.AssignmentVector_get_allocator(self)
    def begin(self): return _ccdb_pyllapi.AssignmentVector_begin(self)
    def end(self): return _ccdb_pyllapi.AssignmentVector_end(self)
    def rbegin(self): return _ccdb_pyllapi.AssignmentVector_rbegin(self)
    def rend(self): return _ccdb_pyllapi.AssignmentVector_rend(self)
    def pop_back(self): return _ccdb_pyllapi.AssignmentVector_pop_back(self)
    def erase(self, *args): return _ccdb_pyllapi.AssignmentVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ccdb_pyllapi.new_AssignmentVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ccdb_pyllapi.AssignmentVector_push_back(self, *args)
    def front(self): return _ccdb_pyllapi.AssignmentVector_front(self)
    def back(self): return _ccdb_pyllapi.AssignmentVector_back(self)
    def assign(self, *args): return _ccdb_pyllapi.AssignmentVector_assign(self, *args)
    def resize(self, *args): return _ccdb_pyllapi.AssignmentVector_resize(self, *args)
    def insert(self, *args): return _ccdb_pyllapi.AssignmentVector_insert(self, *args)
    def reserve(self, *args): return _ccdb_pyllapi.AssignmentVector_reserve(self, *args)
    def capacity(self): return _ccdb_pyllapi.AssignmentVector_capacity(self)
    __swig_destroy__ = _ccdb_pyllapi.delete_AssignmentVector
    __del__ = lambda self : None;
AssignmentVector_swigregister = _ccdb_pyllapi.AssignmentVector_swigregister
AssignmentVector_swigregister(AssignmentVector)

class DirectoryVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectoryVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirectoryVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ccdb_pyllapi.DirectoryVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ccdb_pyllapi.DirectoryVector___nonzero__(self)
    def __bool__(self): return _ccdb_pyllapi.DirectoryVector___bool__(self)
    def __len__(self): return _ccdb_pyllapi.DirectoryVector___len__(self)
    def pop(self): return _ccdb_pyllapi.DirectoryVector_pop(self)
    def __getslice__(self, *args): return _ccdb_pyllapi.DirectoryVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ccdb_pyllapi.DirectoryVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ccdb_pyllapi.DirectoryVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ccdb_pyllapi.DirectoryVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ccdb_pyllapi.DirectoryVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ccdb_pyllapi.DirectoryVector___setitem__(self, *args)
    def append(self, *args): return _ccdb_pyllapi.DirectoryVector_append(self, *args)
    def empty(self): return _ccdb_pyllapi.DirectoryVector_empty(self)
    def size(self): return _ccdb_pyllapi.DirectoryVector_size(self)
    def clear(self): return _ccdb_pyllapi.DirectoryVector_clear(self)
    def swap(self, *args): return _ccdb_pyllapi.DirectoryVector_swap(self, *args)
    def get_allocator(self): return _ccdb_pyllapi.DirectoryVector_get_allocator(self)
    def begin(self): return _ccdb_pyllapi.DirectoryVector_begin(self)
    def end(self): return _ccdb_pyllapi.DirectoryVector_end(self)
    def rbegin(self): return _ccdb_pyllapi.DirectoryVector_rbegin(self)
    def rend(self): return _ccdb_pyllapi.DirectoryVector_rend(self)
    def pop_back(self): return _ccdb_pyllapi.DirectoryVector_pop_back(self)
    def erase(self, *args): return _ccdb_pyllapi.DirectoryVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ccdb_pyllapi.new_DirectoryVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ccdb_pyllapi.DirectoryVector_push_back(self, *args)
    def front(self): return _ccdb_pyllapi.DirectoryVector_front(self)
    def back(self): return _ccdb_pyllapi.DirectoryVector_back(self)
    def assign(self, *args): return _ccdb_pyllapi.DirectoryVector_assign(self, *args)
    def resize(self, *args): return _ccdb_pyllapi.DirectoryVector_resize(self, *args)
    def insert(self, *args): return _ccdb_pyllapi.DirectoryVector_insert(self, *args)
    def reserve(self, *args): return _ccdb_pyllapi.DirectoryVector_reserve(self, *args)
    def capacity(self): return _ccdb_pyllapi.DirectoryVector_capacity(self)
    __swig_destroy__ = _ccdb_pyllapi.delete_DirectoryVector
    __del__ = lambda self : None;
DirectoryVector_swigregister = _ccdb_pyllapi.DirectoryVector_swigregister
DirectoryVector_swigregister(DirectoryVector)

class ConstantsTypeTableVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantsTypeTableVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantsTypeTableVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ccdb_pyllapi.ConstantsTypeTableVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ccdb_pyllapi.ConstantsTypeTableVector___nonzero__(self)
    def __bool__(self): return _ccdb_pyllapi.ConstantsTypeTableVector___bool__(self)
    def __len__(self): return _ccdb_pyllapi.ConstantsTypeTableVector___len__(self)
    def pop(self): return _ccdb_pyllapi.ConstantsTypeTableVector_pop(self)
    def __getslice__(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector___setitem__(self, *args)
    def append(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_append(self, *args)
    def empty(self): return _ccdb_pyllapi.ConstantsTypeTableVector_empty(self)
    def size(self): return _ccdb_pyllapi.ConstantsTypeTableVector_size(self)
    def clear(self): return _ccdb_pyllapi.ConstantsTypeTableVector_clear(self)
    def swap(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_swap(self, *args)
    def get_allocator(self): return _ccdb_pyllapi.ConstantsTypeTableVector_get_allocator(self)
    def begin(self): return _ccdb_pyllapi.ConstantsTypeTableVector_begin(self)
    def end(self): return _ccdb_pyllapi.ConstantsTypeTableVector_end(self)
    def rbegin(self): return _ccdb_pyllapi.ConstantsTypeTableVector_rbegin(self)
    def rend(self): return _ccdb_pyllapi.ConstantsTypeTableVector_rend(self)
    def pop_back(self): return _ccdb_pyllapi.ConstantsTypeTableVector_pop_back(self)
    def erase(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ccdb_pyllapi.new_ConstantsTypeTableVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_push_back(self, *args)
    def front(self): return _ccdb_pyllapi.ConstantsTypeTableVector_front(self)
    def back(self): return _ccdb_pyllapi.ConstantsTypeTableVector_back(self)
    def assign(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_assign(self, *args)
    def resize(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_resize(self, *args)
    def insert(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_insert(self, *args)
    def reserve(self, *args): return _ccdb_pyllapi.ConstantsTypeTableVector_reserve(self, *args)
    def capacity(self): return _ccdb_pyllapi.ConstantsTypeTableVector_capacity(self)
    __swig_destroy__ = _ccdb_pyllapi.delete_ConstantsTypeTableVector
    __del__ = lambda self : None;
ConstantsTypeTableVector_swigregister = _ccdb_pyllapi.ConstantsTypeTableVector_swigregister
ConstantsTypeTableVector_swigregister(ConstantsTypeTableVector)

class ConstantsTypeColumnVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantsTypeColumnVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantsTypeColumnVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ccdb_pyllapi.ConstantsTypeColumnVector___nonzero__(self)
    def __bool__(self): return _ccdb_pyllapi.ConstantsTypeColumnVector___bool__(self)
    def __len__(self): return _ccdb_pyllapi.ConstantsTypeColumnVector___len__(self)
    def pop(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_pop(self)
    def __getslice__(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector___setitem__(self, *args)
    def append(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_append(self, *args)
    def empty(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_empty(self)
    def size(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_size(self)
    def clear(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_clear(self)
    def swap(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_swap(self, *args)
    def get_allocator(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_get_allocator(self)
    def begin(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_begin(self)
    def end(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_end(self)
    def rbegin(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_rbegin(self)
    def rend(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_rend(self)
    def pop_back(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_pop_back(self)
    def erase(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ccdb_pyllapi.new_ConstantsTypeColumnVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_push_back(self, *args)
    def front(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_front(self)
    def back(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_back(self)
    def assign(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_assign(self, *args)
    def resize(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_resize(self, *args)
    def insert(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_insert(self, *args)
    def reserve(self, *args): return _ccdb_pyllapi.ConstantsTypeColumnVector_reserve(self, *args)
    def capacity(self): return _ccdb_pyllapi.ConstantsTypeColumnVector_capacity(self)
    __swig_destroy__ = _ccdb_pyllapi.delete_ConstantsTypeColumnVector
    __del__ = lambda self : None;
ConstantsTypeColumnVector_swigregister = _ccdb_pyllapi.ConstantsTypeColumnVector_swigregister
ConstantsTypeColumnVector_swigregister(ConstantsTypeColumnVector)

class StringVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ccdb_pyllapi.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ccdb_pyllapi.StringVector___nonzero__(self)
    def __bool__(self): return _ccdb_pyllapi.StringVector___bool__(self)
    def __len__(self): return _ccdb_pyllapi.StringVector___len__(self)
    def pop(self): return _ccdb_pyllapi.StringVector_pop(self)
    def __getslice__(self, *args): return _ccdb_pyllapi.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ccdb_pyllapi.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ccdb_pyllapi.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ccdb_pyllapi.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ccdb_pyllapi.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ccdb_pyllapi.StringVector___setitem__(self, *args)
    def append(self, *args): return _ccdb_pyllapi.StringVector_append(self, *args)
    def empty(self): return _ccdb_pyllapi.StringVector_empty(self)
    def size(self): return _ccdb_pyllapi.StringVector_size(self)
    def clear(self): return _ccdb_pyllapi.StringVector_clear(self)
    def swap(self, *args): return _ccdb_pyllapi.StringVector_swap(self, *args)
    def get_allocator(self): return _ccdb_pyllapi.StringVector_get_allocator(self)
    def begin(self): return _ccdb_pyllapi.StringVector_begin(self)
    def end(self): return _ccdb_pyllapi.StringVector_end(self)
    def rbegin(self): return _ccdb_pyllapi.StringVector_rbegin(self)
    def rend(self): return _ccdb_pyllapi.StringVector_rend(self)
    def pop_back(self): return _ccdb_pyllapi.StringVector_pop_back(self)
    def erase(self, *args): return _ccdb_pyllapi.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ccdb_pyllapi.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ccdb_pyllapi.StringVector_push_back(self, *args)
    def front(self): return _ccdb_pyllapi.StringVector_front(self)
    def back(self): return _ccdb_pyllapi.StringVector_back(self)
    def assign(self, *args): return _ccdb_pyllapi.StringVector_assign(self, *args)
    def resize(self, *args): return _ccdb_pyllapi.StringVector_resize(self, *args)
    def insert(self, *args): return _ccdb_pyllapi.StringVector_insert(self, *args)
    def reserve(self, *args): return _ccdb_pyllapi.StringVector_reserve(self, *args)
    def capacity(self): return _ccdb_pyllapi.StringVector_capacity(self)
    __swig_destroy__ = _ccdb_pyllapi.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _ccdb_pyllapi.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringVectorVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVectorVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ccdb_pyllapi.StringVectorVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ccdb_pyllapi.StringVectorVector___nonzero__(self)
    def __bool__(self): return _ccdb_pyllapi.StringVectorVector___bool__(self)
    def __len__(self): return _ccdb_pyllapi.StringVectorVector___len__(self)
    def pop(self): return _ccdb_pyllapi.StringVectorVector_pop(self)
    def __getslice__(self, *args): return _ccdb_pyllapi.StringVectorVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ccdb_pyllapi.StringVectorVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ccdb_pyllapi.StringVectorVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ccdb_pyllapi.StringVectorVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ccdb_pyllapi.StringVectorVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ccdb_pyllapi.StringVectorVector___setitem__(self, *args)
    def append(self, *args): return _ccdb_pyllapi.StringVectorVector_append(self, *args)
    def empty(self): return _ccdb_pyllapi.StringVectorVector_empty(self)
    def size(self): return _ccdb_pyllapi.StringVectorVector_size(self)
    def clear(self): return _ccdb_pyllapi.StringVectorVector_clear(self)
    def swap(self, *args): return _ccdb_pyllapi.StringVectorVector_swap(self, *args)
    def get_allocator(self): return _ccdb_pyllapi.StringVectorVector_get_allocator(self)
    def begin(self): return _ccdb_pyllapi.StringVectorVector_begin(self)
    def end(self): return _ccdb_pyllapi.StringVectorVector_end(self)
    def rbegin(self): return _ccdb_pyllapi.StringVectorVector_rbegin(self)
    def rend(self): return _ccdb_pyllapi.StringVectorVector_rend(self)
    def pop_back(self): return _ccdb_pyllapi.StringVectorVector_pop_back(self)
    def erase(self, *args): return _ccdb_pyllapi.StringVectorVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ccdb_pyllapi.new_StringVectorVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ccdb_pyllapi.StringVectorVector_push_back(self, *args)
    def front(self): return _ccdb_pyllapi.StringVectorVector_front(self)
    def back(self): return _ccdb_pyllapi.StringVectorVector_back(self)
    def assign(self, *args): return _ccdb_pyllapi.StringVectorVector_assign(self, *args)
    def resize(self, *args): return _ccdb_pyllapi.StringVectorVector_resize(self, *args)
    def insert(self, *args): return _ccdb_pyllapi.StringVectorVector_insert(self, *args)
    def reserve(self, *args): return _ccdb_pyllapi.StringVectorVector_reserve(self, *args)
    def capacity(self): return _ccdb_pyllapi.StringVectorVector_capacity(self)
    __swig_destroy__ = _ccdb_pyllapi.delete_StringVectorVector
    __del__ = lambda self : None;
StringVectorVector_swigregister = _ccdb_pyllapi.StringVectorVector_swigregister
StringVectorVector_swigregister(StringVectorVector)

class StringStringMap:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringStringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringStringMap, name)
    __repr__ = _swig_repr
    def iterator(self): return _ccdb_pyllapi.StringStringMap_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ccdb_pyllapi.StringStringMap___nonzero__(self)
    def __bool__(self): return _ccdb_pyllapi.StringStringMap___bool__(self)
    def __len__(self): return _ccdb_pyllapi.StringStringMap___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _ccdb_pyllapi.StringStringMap___getitem__(self, *args)
    def __delitem__(self, *args): return _ccdb_pyllapi.StringStringMap___delitem__(self, *args)
    def has_key(self, *args): return _ccdb_pyllapi.StringStringMap_has_key(self, *args)
    def keys(self): return _ccdb_pyllapi.StringStringMap_keys(self)
    def values(self): return _ccdb_pyllapi.StringStringMap_values(self)
    def items(self): return _ccdb_pyllapi.StringStringMap_items(self)
    def __contains__(self, *args): return _ccdb_pyllapi.StringStringMap___contains__(self, *args)
    def key_iterator(self): return _ccdb_pyllapi.StringStringMap_key_iterator(self)
    def value_iterator(self): return _ccdb_pyllapi.StringStringMap_value_iterator(self)
    def __setitem__(self, *args): return _ccdb_pyllapi.StringStringMap___setitem__(self, *args)
    def asdict(self): return _ccdb_pyllapi.StringStringMap_asdict(self)
    def __init__(self, *args): 
        this = _ccdb_pyllapi.new_StringStringMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _ccdb_pyllapi.StringStringMap_empty(self)
    def size(self): return _ccdb_pyllapi.StringStringMap_size(self)
    def clear(self): return _ccdb_pyllapi.StringStringMap_clear(self)
    def swap(self, *args): return _ccdb_pyllapi.StringStringMap_swap(self, *args)
    def get_allocator(self): return _ccdb_pyllapi.StringStringMap_get_allocator(self)
    def begin(self): return _ccdb_pyllapi.StringStringMap_begin(self)
    def end(self): return _ccdb_pyllapi.StringStringMap_end(self)
    def rbegin(self): return _ccdb_pyllapi.StringStringMap_rbegin(self)
    def rend(self): return _ccdb_pyllapi.StringStringMap_rend(self)
    def count(self, *args): return _ccdb_pyllapi.StringStringMap_count(self, *args)
    def erase(self, *args): return _ccdb_pyllapi.StringStringMap_erase(self, *args)
    def find(self, *args): return _ccdb_pyllapi.StringStringMap_find(self, *args)
    def lower_bound(self, *args): return _ccdb_pyllapi.StringStringMap_lower_bound(self, *args)
    def upper_bound(self, *args): return _ccdb_pyllapi.StringStringMap_upper_bound(self, *args)
    __swig_destroy__ = _ccdb_pyllapi.delete_StringStringMap
    __del__ = lambda self : None;
StringStringMap_swigregister = _ccdb_pyllapi.StringStringMap_swigregister
StringStringMap_swigregister(StringStringMap)

class StringStringMapVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringStringMapVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringStringMapVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ccdb_pyllapi.StringStringMapVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ccdb_pyllapi.StringStringMapVector___nonzero__(self)
    def __bool__(self): return _ccdb_pyllapi.StringStringMapVector___bool__(self)
    def __len__(self): return _ccdb_pyllapi.StringStringMapVector___len__(self)
    def pop(self): return _ccdb_pyllapi.StringStringMapVector_pop(self)
    def __getslice__(self, *args): return _ccdb_pyllapi.StringStringMapVector___getslice__(self, *args)
    def __setslice__(self, *args): return _ccdb_pyllapi.StringStringMapVector___setslice__(self, *args)
    def __delslice__(self, *args): return _ccdb_pyllapi.StringStringMapVector___delslice__(self, *args)
    def __delitem__(self, *args): return _ccdb_pyllapi.StringStringMapVector___delitem__(self, *args)
    def __getitem__(self, *args): return _ccdb_pyllapi.StringStringMapVector___getitem__(self, *args)
    def __setitem__(self, *args): return _ccdb_pyllapi.StringStringMapVector___setitem__(self, *args)
    def append(self, *args): return _ccdb_pyllapi.StringStringMapVector_append(self, *args)
    def empty(self): return _ccdb_pyllapi.StringStringMapVector_empty(self)
    def size(self): return _ccdb_pyllapi.StringStringMapVector_size(self)
    def clear(self): return _ccdb_pyllapi.StringStringMapVector_clear(self)
    def swap(self, *args): return _ccdb_pyllapi.StringStringMapVector_swap(self, *args)
    def get_allocator(self): return _ccdb_pyllapi.StringStringMapVector_get_allocator(self)
    def begin(self): return _ccdb_pyllapi.StringStringMapVector_begin(self)
    def end(self): return _ccdb_pyllapi.StringStringMapVector_end(self)
    def rbegin(self): return _ccdb_pyllapi.StringStringMapVector_rbegin(self)
    def rend(self): return _ccdb_pyllapi.StringStringMapVector_rend(self)
    def pop_back(self): return _ccdb_pyllapi.StringStringMapVector_pop_back(self)
    def erase(self, *args): return _ccdb_pyllapi.StringStringMapVector_erase(self, *args)
    def __init__(self, *args): 
        this = _ccdb_pyllapi.new_StringStringMapVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ccdb_pyllapi.StringStringMapVector_push_back(self, *args)
    def front(self): return _ccdb_pyllapi.StringStringMapVector_front(self)
    def back(self): return _ccdb_pyllapi.StringStringMapVector_back(self)
    def assign(self, *args): return _ccdb_pyllapi.StringStringMapVector_assign(self, *args)
    def resize(self, *args): return _ccdb_pyllapi.StringStringMapVector_resize(self, *args)
    def insert(self, *args): return _ccdb_pyllapi.StringStringMapVector_insert(self, *args)
    def reserve(self, *args): return _ccdb_pyllapi.StringStringMapVector_reserve(self, *args)
    def capacity(self): return _ccdb_pyllapi.StringStringMapVector_capacity(self)
    __swig_destroy__ = _ccdb_pyllapi.delete_StringStringMapVector
    __del__ = lambda self : None;
StringStringMapVector_swigregister = _ccdb_pyllapi.StringStringMapVector_swigregister
StringStringMapVector_swigregister(StringStringMapVector)

# This file is compatible with both classic and new-style classes.


