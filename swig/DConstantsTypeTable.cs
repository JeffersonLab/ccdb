/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ccdb {

using System;
using System.Runtime.InteropServices;

public class DConstantsTypeTable : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DConstantsTypeTable(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DConstantsTypeTable obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DConstantsTypeTable() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ccdb_csllapiPINVOKE.delete_DConstantsTypeTable(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public DConstantsTypeTable() : this(ccdb_csllapiPINVOKE.new_DConstantsTypeTable(), true) {
  }

  public void SetDirectory(DDirectory directory) {
    ccdb_csllapiPINVOKE.DConstantsTypeTable_SetDirectory(swigCPtr, DDirectory.getCPtr(directory));
  }

  public DDirectory GetDirectory() {
    IntPtr cPtr = ccdb_csllapiPINVOKE.DConstantsTypeTable_GetDirectory(swigCPtr);
    DDirectory ret = (cPtr == IntPtr.Zero) ? null : new DDirectory(cPtr, false);
    return ret;
  }

  public void SetDirectoryId(int directoryId) {
    ccdb_csllapiPINVOKE.DConstantsTypeTable_SetDirectoryId(swigCPtr, directoryId);
  }

  public int GetDirectoryId() {
    int ret = ccdb_csllapiPINVOKE.DConstantsTypeTable_GetDirectoryId(swigCPtr);
    return ret;
  }

  public void SetFullPath(SWIGTYPE_p_std__string fFullPath) {
    ccdb_csllapiPINVOKE.DConstantsTypeTable_SetFullPath(swigCPtr, SWIGTYPE_p_std__string.getCPtr(fFullPath));
    if (ccdb_csllapiPINVOKE.SWIGPendingException.Pending) throw ccdb_csllapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__string GetFullPath() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(ccdb_csllapiPINVOKE.DConstantsTypeTable_GetFullPath(swigCPtr), true);
    return ret;
  }

  public void SetId(uint id) {
    ccdb_csllapiPINVOKE.DConstantsTypeTable_SetId(swigCPtr, id);
  }

  public int GetId() {
    int ret = ccdb_csllapiPINVOKE.DConstantsTypeTable_GetId(swigCPtr);
    return ret;
  }

  public void SetName(SWIGTYPE_p_std__string name) {
    ccdb_csllapiPINVOKE.DConstantsTypeTable_SetName(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name));
    if (ccdb_csllapiPINVOKE.SWIGPendingException.Pending) throw ccdb_csllapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__string GetName() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(ccdb_csllapiPINVOKE.DConstantsTypeTable_GetName(swigCPtr), true);
    return ret;
  }

  public string GetComment() {
    string ret = ccdb_csllapiPINVOKE.DConstantsTypeTable_GetComment(swigCPtr);
    return ret;
  }

  public void SetComment(SWIGTYPE_p_std__string val) {
    ccdb_csllapiPINVOKE.DConstantsTypeTable_SetComment(swigCPtr, SWIGTYPE_p_std__string.getCPtr(val));
    if (ccdb_csllapiPINVOKE.SWIGPendingException.Pending) throw ccdb_csllapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_time_t GetCreatedTime() {
    SWIGTYPE_p_time_t ret = new SWIGTYPE_p_time_t(ccdb_csllapiPINVOKE.DConstantsTypeTable_GetCreatedTime(swigCPtr), true);
    return ret;
  }

  public void SetCreatedTime(SWIGTYPE_p_time_t val) {
    ccdb_csllapiPINVOKE.DConstantsTypeTable_SetCreatedTime(swigCPtr, SWIGTYPE_p_time_t.getCPtr(val));
    if (ccdb_csllapiPINVOKE.SWIGPendingException.Pending) throw ccdb_csllapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_time_t GetModifiedTime() {
    SWIGTYPE_p_time_t ret = new SWIGTYPE_p_time_t(ccdb_csllapiPINVOKE.DConstantsTypeTable_GetModifiedTime(swigCPtr), true);
    return ret;
  }

  public void SetModifiedTime(SWIGTYPE_p_time_t val) {
    ccdb_csllapiPINVOKE.DConstantsTypeTable_SetModifiedTime(swigCPtr, SWIGTYPE_p_time_t.getCPtr(val));
    if (ccdb_csllapiPINVOKE.SWIGPendingException.Pending) throw ccdb_csllapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetNRows() {
    int ret = ccdb_csllapiPINVOKE.DConstantsTypeTable_GetNRows(swigCPtr);
    return ret;
  }

  public void SetNRows(int val) {
    ccdb_csllapiPINVOKE.DConstantsTypeTable_SetNRows(swigCPtr, val);
  }

  public int GetNColumns() {
    int ret = ccdb_csllapiPINVOKE.DConstantsTypeTable_GetNColumns(swigCPtr);
    return ret;
  }

  public int GetNColumnsFromDB() {
    int ret = ccdb_csllapiPINVOKE.DConstantsTypeTable_GetNColumnsFromDB(swigCPtr);
    return ret;
  }

  public void SetNColumnsFromDB(int val) {
    ccdb_csllapiPINVOKE.DConstantsTypeTable_SetNColumnsFromDB(swigCPtr, val);
  }

  public void ClearColumns() {
    ccdb_csllapiPINVOKE.DConstantsTypeTable_ClearColumns(swigCPtr);
  }

  public SWIGTYPE_p_std__vectorT_std__string_t GetColumnNames() {
    SWIGTYPE_p_std__vectorT_std__string_t ret = new SWIGTYPE_p_std__vectorT_std__string_t(ccdb_csllapiPINVOKE.DConstantsTypeTable_GetColumnNames(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__string_t GetColumnTypeStrings() {
    SWIGTYPE_p_std__vectorT_std__string_t ret = new SWIGTYPE_p_std__vectorT_std__string_t(ccdb_csllapiPINVOKE.DConstantsTypeTable_GetColumnTypeStrings(swigCPtr), true);
    return ret;
  }

}

}
