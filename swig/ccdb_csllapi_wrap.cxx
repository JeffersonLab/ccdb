/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_ccdb_csllapi(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_ccdb_csllapi(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_ccdb_csllapi(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include <string>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>



#include "Model/DRunRange.h"
using namespace ccdb;



#include "Model/DDirectory.h"
using namespace ccdb;


#include "Model/DDirectory.h"
#include "Providers/DDataProvider.h"
#include "Providers/DMySQLDataProvider.h"
using namespace ccdb;
using namespace std;



#include "Model/DDirectory.h"
using namespace ccdb;
using namespace std;


#include "DCCDBGlobals.h"
/*#define #define SWIG_FILE_WITH_INIT
#include "Model/DRunRange.h"
using namespace ccdb;*/
	

SWIGINTERN vector< DDirectory * > *new_vector_Sl_DDirectory_Sm__Sg___SWIG_2(int capacity){
        std::vector< DDirectory * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< DDirectory * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN DDirectory *vector_Sl_DDirectory_Sm__Sg__getitemcopy(vector< DDirectory * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN vector< DDirectory * >::const_reference vector_Sl_DDirectory_Sm__Sg__getitem(vector< DDirectory * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void vector_Sl_DDirectory_Sm__Sg__setitem(vector< DDirectory * > *self,int index,DDirectory *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void vector_Sl_DDirectory_Sm__Sg__AddRange(vector< DDirectory * > *self,std::vector< DDirectory * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< DDirectory * > *vector_Sl_DDirectory_Sm__Sg__GetRange(vector< DDirectory * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< DDirectory * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void vector_Sl_DDirectory_Sm__Sg__Insert(vector< DDirectory * > *self,int index,DDirectory *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void vector_Sl_DDirectory_Sm__Sg__InsertRange(vector< DDirectory * > *self,int index,std::vector< DDirectory * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void vector_Sl_DDirectory_Sm__Sg__RemoveAt(vector< DDirectory * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void vector_Sl_DDirectory_Sm__Sg__RemoveRange(vector< DDirectory * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< DDirectory * > *vector_Sl_DDirectory_Sm__Sg__Repeat(DDirectory *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< DDirectory * >(count, value);
      }
SWIGINTERN void vector_Sl_DDirectory_Sm__Sg__Reverse__SWIG_0(vector< DDirectory * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void vector_Sl_DDirectory_Sm__Sg__Reverse__SWIG_1(vector< DDirectory * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void vector_Sl_DDirectory_Sm__Sg__SetRange(vector< DDirectory * > *self,int index,std::vector< DDirectory * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool vector_Sl_DDirectory_Sm__Sg__Contains(vector< DDirectory * > *self,DDirectory *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int vector_Sl_DDirectory_Sm__Sg__IndexOf(vector< DDirectory * > *self,DDirectory *const &value){
        int index = -1;
        std::vector< DDirectory * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int vector_Sl_DDirectory_Sm__Sg__LastIndexOf(vector< DDirectory * > *self,DDirectory *const &value){
        int index = -1;
        std::vector< DDirectory * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool vector_Sl_DDirectory_Sm__Sg__Remove(vector< DDirectory * > *self,DDirectory *const &value){
        std::vector< DDirectory * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_DRunRange() {
  void * jresult ;
  DRunRange *result = 0 ;
  
  result = (DRunRange *)new DRunRange();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DRunRange(void * jarg1) {
  DRunRange *arg1 = (DRunRange *) 0 ;
  
  arg1 = (DRunRange *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRunRange_GetId(void * jarg1) {
  int jresult ;
  DRunRange *arg1 = (DRunRange *) 0 ;
  int result;
  
  arg1 = (DRunRange *)jarg1; 
  result = (int)((DRunRange const *)arg1)->GetId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRunRange_GetMax(void * jarg1) {
  int jresult ;
  DRunRange *arg1 = (DRunRange *) 0 ;
  int result;
  
  arg1 = (DRunRange *)jarg1; 
  result = (int)((DRunRange const *)arg1)->GetMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DRunRange_GetMin(void * jarg1) {
  int jresult ;
  DRunRange *arg1 = (DRunRange *) 0 ;
  int result;
  
  arg1 = (DRunRange *)jarg1; 
  result = (int)((DRunRange const *)arg1)->GetMin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DRunRange_GetName(void * jarg1) {
  char * jresult ;
  DRunRange *arg1 = (DRunRange *) 0 ;
  std::string result;
  
  arg1 = (DRunRange *)jarg1; 
  result = ((DRunRange const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DRunRange_GetComment(void * jarg1) {
  char * jresult ;
  DRunRange *arg1 = (DRunRange *) 0 ;
  std::string result;
  
  arg1 = (DRunRange *)jarg1; 
  result = ((DRunRange const *)arg1)->GetComment();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DRunRange_SetId(void * jarg1, int jarg2) {
  DRunRange *arg1 = (DRunRange *) 0 ;
  int arg2 ;
  
  arg1 = (DRunRange *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetId(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DRunRange_SetMax(void * jarg1, int jarg2) {
  DRunRange *arg1 = (DRunRange *) 0 ;
  int arg2 ;
  
  arg1 = (DRunRange *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMax(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DRunRange_SetMin(void * jarg1, int jarg2) {
  DRunRange *arg1 = (DRunRange *) 0 ;
  int arg2 ;
  
  arg1 = (DRunRange *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DRunRange_SetName(void * jarg1, char * jarg2) {
  DRunRange *arg1 = (DRunRange *) 0 ;
  std::string arg2 ;
  
  arg1 = (DRunRange *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SetName(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DRunRange_SetComment(void * jarg1, char * jarg2) {
  DRunRange *arg1 = (DRunRange *) 0 ;
  std::string arg2 ;
  
  arg1 = (DRunRange *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SetComment(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DRunRange_SetRange(void * jarg1, int jarg2, int jarg3) {
  DRunRange *arg1 = (DRunRange *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (DRunRange *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetRange(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DRunRange_GetCreatedTime(void * jarg1) {
  void * jresult ;
  DRunRange *arg1 = (DRunRange *) 0 ;
  time_t result;
  
  arg1 = (DRunRange *)jarg1; 
  result = ((DRunRange const *)arg1)->GetCreatedTime();
  jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DRunRange_SetCreatedTime(void * jarg1, void * jarg2) {
  DRunRange *arg1 = (DRunRange *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  arg1 = (DRunRange *)jarg1; 
  argp2 = (time_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null time_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetCreatedTime(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DRunRange_GetModifiedTime(void * jarg1) {
  void * jresult ;
  DRunRange *arg1 = (DRunRange *) 0 ;
  time_t result;
  
  arg1 = (DRunRange *)jarg1; 
  result = ((DRunRange const *)arg1)->GetModifiedTime();
  jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DRunRange_SetModifiedTime(void * jarg1, void * jarg2) {
  DRunRange *arg1 = (DRunRange *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  arg1 = (DRunRange *)jarg1; 
  argp2 = (time_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null time_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetModifiedTime(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DDirectory() {
  void * jresult ;
  DDirectory *result = 0 ;
  
  result = (DDirectory *)new DDirectory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DDirectory(void * jarg1) {
  DDirectory *arg1 = (DDirectory *) 0 ;
  
  arg1 = (DDirectory *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DDirectory_GetParentDirectory(void * jarg1) {
  void * jresult ;
  DDirectory *arg1 = (DDirectory *) 0 ;
  DDirectory *result = 0 ;
  
  arg1 = (DDirectory *)jarg1; 
  result = (DDirectory *)(arg1)->GetParentDirectory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DDirectory_GetSubdirectories(void * jarg1) {
  void * jresult ;
  DDirectory *arg1 = (DDirectory *) 0 ;
  vector< DDirectory * > *result = 0 ;
  
  arg1 = (DDirectory *)jarg1; 
  result = (vector< DDirectory * > *) &(arg1)->GetSubdirectories();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectory_AddSubdirectory(void * jarg1, void * jarg2) {
  DDirectory *arg1 = (DDirectory *) 0 ;
  DDirectory *arg2 = (DDirectory *) 0 ;
  
  arg1 = (DDirectory *)jarg1; 
  arg2 = (DDirectory *)jarg2; 
  (arg1)->AddSubdirectory(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectory_DisposeSubdirectories(void * jarg1) {
  DDirectory *arg1 = (DDirectory *) 0 ;
  
  arg1 = (DDirectory *)jarg1; 
  (arg1)->DisposeSubdirectories();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DDirectory_GetId(void * jarg1) {
  unsigned int jresult ;
  DDirectory *arg1 = (DDirectory *) 0 ;
  dbkey_t result;
  
  arg1 = (DDirectory *)jarg1; 
  result = ((DDirectory const *)arg1)->GetId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectory_SetId(void * jarg1, unsigned int jarg2) {
  DDirectory *arg1 = (DDirectory *) 0 ;
  dbkey_t arg2 ;
  
  arg1 = (DDirectory *)jarg1; 
  arg2 = (dbkey_t)jarg2; 
  (arg1)->SetId(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DDirectory_GetParentId(void * jarg1) {
  unsigned int jresult ;
  DDirectory *arg1 = (DDirectory *) 0 ;
  dbkey_t result;
  
  arg1 = (DDirectory *)jarg1; 
  result = ((DDirectory const *)arg1)->GetParentId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectory_SetParentId(void * jarg1, unsigned int jarg2) {
  DDirectory *arg1 = (DDirectory *) 0 ;
  dbkey_t arg2 ;
  
  arg1 = (DDirectory *)jarg1; 
  arg2 = (dbkey_t)jarg2; 
  (arg1)->SetParentId(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DDirectory_GetName(void * jarg1) {
  char * jresult ;
  DDirectory *arg1 = (DDirectory *) 0 ;
  std::string result;
  
  arg1 = (DDirectory *)jarg1; 
  result = ((DDirectory const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectory_SetName(void * jarg1, char * jarg2) {
  DDirectory *arg1 = (DDirectory *) 0 ;
  std::string arg2 ;
  
  arg1 = (DDirectory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SetName(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DDirectory_GetFullPath(void * jarg1) {
  char * jresult ;
  DDirectory *arg1 = (DDirectory *) 0 ;
  std::string result;
  
  arg1 = (DDirectory *)jarg1; 
  result = ((DDirectory const *)arg1)->GetFullPath();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectory_SetFullPath(void * jarg1, char * jarg2) {
  DDirectory *arg1 = (DDirectory *) 0 ;
  std::string arg2 ;
  
  arg1 = (DDirectory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SetFullPath(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DDirectory_GetCreatedTime(void * jarg1) {
  void * jresult ;
  DDirectory *arg1 = (DDirectory *) 0 ;
  time_t result;
  
  arg1 = (DDirectory *)jarg1; 
  result = ((DDirectory const *)arg1)->GetCreatedTime();
  jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectory_SetCreatedTime(void * jarg1, void * jarg2) {
  DDirectory *arg1 = (DDirectory *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  arg1 = (DDirectory *)jarg1; 
  argp2 = (time_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null time_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetCreatedTime(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DDirectory_GetModifiedTime(void * jarg1) {
  void * jresult ;
  DDirectory *arg1 = (DDirectory *) 0 ;
  time_t result;
  
  arg1 = (DDirectory *)jarg1; 
  result = ((DDirectory const *)arg1)->GetModifiedTime();
  jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectory_SetModifiedTime(void * jarg1, void * jarg2) {
  DDirectory *arg1 = (DDirectory *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  arg1 = (DDirectory *)jarg1; 
  argp2 = (time_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null time_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetModifiedTime(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DDirectory_GetComment(void * jarg1) {
  char * jresult ;
  DDirectory *arg1 = (DDirectory *) 0 ;
  std::string result;
  
  arg1 = (DDirectory *)jarg1; 
  result = ((DDirectory const *)arg1)->GetComment();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectory_SetComment(void * jarg1, char * jarg2) {
  DDirectory *arg1 = (DDirectory *) 0 ;
  std::string arg2 ;
  
  arg1 = (DDirectory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SetComment(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DDataProvider(void * jarg1) {
  DDataProvider *arg1 = (DDataProvider *) 0 ;
  
  arg1 = (DDataProvider *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DDataProvider_Connect(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  DDataProvider *arg1 = (DDataProvider *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (DDataProvider *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->Connect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDataProvider_Disconnect(void * jarg1) {
  DDataProvider *arg1 = (DDataProvider *) 0 ;
  
  arg1 = (DDataProvider *)jarg1; 
  (arg1)->Disconnect();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DDataProvider_IsConnected(void * jarg1) {
  unsigned int jresult ;
  DDataProvider *arg1 = (DDataProvider *) 0 ;
  bool result;
  
  arg1 = (DDataProvider *)jarg1; 
  result = (bool)(arg1)->IsConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DDataProvider_GetDirectory(void * jarg1, char * jarg2) {
  void * jresult ;
  DDataProvider *arg1 = (DDataProvider *) 0 ;
  std::string *arg2 = 0 ;
  DDirectory *result = 0 ;
  
  arg1 = (DDataProvider *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (DDirectory *)(arg1)->GetDirectory((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DMySQLDataProvider() {
  void * jresult ;
  DMySQLDataProvider *result = 0 ;
  
  result = (DMySQLDataProvider *)new DMySQLDataProvider();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DMySQLDataProvider(void * jarg1) {
  DMySQLDataProvider *arg1 = (DMySQLDataProvider *) 0 ;
  
  arg1 = (DMySQLDataProvider *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DMySQLDataProvider_Connect(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  DMySQLDataProvider *arg1 = (DMySQLDataProvider *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (DMySQLDataProvider *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->Connect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DMySQLDataProvider_IsConnected(void * jarg1) {
  unsigned int jresult ;
  DMySQLDataProvider *arg1 = (DMySQLDataProvider *) 0 ;
  bool result;
  
  arg1 = (DMySQLDataProvider *)jarg1; 
  result = (bool)(arg1)->IsConnected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DMySQLDataProvider_Disconnect(void * jarg1) {
  DMySQLDataProvider *arg1 = (DMySQLDataProvider *) 0 ;
  
  arg1 = (DMySQLDataProvider *)jarg1; 
  (arg1)->Disconnect();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DMySQLDataProvider_GetDirectory(void * jarg1, char * jarg2) {
  void * jresult ;
  DMySQLDataProvider *arg1 = (DMySQLDataProvider *) 0 ;
  std::string *arg2 = 0 ;
  DDirectory *result = 0 ;
  
  arg1 = (DMySQLDataProvider *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (DDirectory *)(arg1)->GetDirectory((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DConstantsTypeTable() {
  void * jresult ;
  DConstantsTypeTable *result = 0 ;
  
  result = (DConstantsTypeTable *)new DConstantsTypeTable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DConstantsTypeTable(void * jarg1) {
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DConstantsTypeTable_SetDirectory(void * jarg1, void * jarg2) {
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  DDirectory *arg2 = (DDirectory *) 0 ;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  arg2 = (DDirectory *)jarg2; 
  (arg1)->SetDirectory(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DConstantsTypeTable_GetDirectory(void * jarg1) {
  void * jresult ;
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  DDirectory *result = 0 ;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  result = (DDirectory *)((DConstantsTypeTable const *)arg1)->GetDirectory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DConstantsTypeTable_SetDirectoryId(void * jarg1, int jarg2) {
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  int arg2 ;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDirectoryId(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_DConstantsTypeTable_GetDirectoryId(void * jarg1) {
  int jresult ;
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  int result;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  result = (int)((DConstantsTypeTable const *)arg1)->GetDirectoryId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DConstantsTypeTable_SetFullPath(void * jarg1, void * jarg2) {
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  argp2 = (string *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null string", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetFullPath(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DConstantsTypeTable_GetFullPath(void * jarg1) {
  void * jresult ;
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  string result;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  result = ((DConstantsTypeTable const *)arg1)->GetFullPath();
  jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DConstantsTypeTable_SetId(void * jarg1, unsigned int jarg2) {
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  dbkey_t arg2 ;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  arg2 = (dbkey_t)jarg2; 
  (arg1)->SetId(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_DConstantsTypeTable_GetId(void * jarg1) {
  int jresult ;
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  int result;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  result = (int)((DConstantsTypeTable const *)arg1)->GetId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DConstantsTypeTable_SetName(void * jarg1, void * jarg2) {
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  string *arg2 = 0 ;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  arg2 = (string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "string const & type is null", 0);
    return ;
  } 
  (arg1)->SetName((string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DConstantsTypeTable_GetName(void * jarg1) {
  void * jresult ;
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  string result;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  result = ((DConstantsTypeTable const *)arg1)->GetName();
  jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DConstantsTypeTable_GetComment(void * jarg1) {
  char * jresult ;
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  std::string result;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  result = ((DConstantsTypeTable const *)arg1)->GetComment();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DConstantsTypeTable_SetComment(void * jarg1, void * jarg2) {
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  string *arg2 = 0 ;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  arg2 = (string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "string const & type is null", 0);
    return ;
  } 
  (arg1)->SetComment((string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DConstantsTypeTable_GetCreatedTime(void * jarg1) {
  void * jresult ;
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  time_t result;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  result = ((DConstantsTypeTable const *)arg1)->GetCreatedTime();
  jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DConstantsTypeTable_SetCreatedTime(void * jarg1, void * jarg2) {
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  argp2 = (time_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null time_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetCreatedTime(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DConstantsTypeTable_GetModifiedTime(void * jarg1) {
  void * jresult ;
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  time_t result;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  result = ((DConstantsTypeTable const *)arg1)->GetModifiedTime();
  jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DConstantsTypeTable_SetModifiedTime(void * jarg1, void * jarg2) {
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  argp2 = (time_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null time_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetModifiedTime(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_DConstantsTypeTable_GetNRows(void * jarg1) {
  int jresult ;
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  int result;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  result = (int)((DConstantsTypeTable const *)arg1)->GetNRows();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DConstantsTypeTable_SetNRows(void * jarg1, int jarg2) {
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  int arg2 ;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNRows(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_DConstantsTypeTable_GetNColumns(void * jarg1) {
  int jresult ;
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  int result;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  result = (int)((DConstantsTypeTable const *)arg1)->GetNColumns();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DConstantsTypeTable_GetNColumnsFromDB(void * jarg1) {
  int jresult ;
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  int result;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  result = (int)((DConstantsTypeTable const *)arg1)->GetNColumnsFromDB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DConstantsTypeTable_SetNColumnsFromDB(void * jarg1, int jarg2) {
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  int arg2 ;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNColumnsFromDB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DConstantsTypeTable_ClearColumns(void * jarg1) {
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  (arg1)->ClearColumns();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DConstantsTypeTable_GetColumnNames(void * jarg1) {
  void * jresult ;
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  vector< string > result;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  result = ((DConstantsTypeTable const *)arg1)->GetColumnNames();
  jresult = new vector< string >((const vector< string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DConstantsTypeTable_GetColumnTypeStrings(void * jarg1) {
  void * jresult ;
  DConstantsTypeTable *arg1 = (DConstantsTypeTable *) 0 ;
  vector< string > result;
  
  arg1 = (DConstantsTypeTable *)jarg1; 
  result = ((DConstantsTypeTable const *)arg1)->GetColumnTypeStrings();
  jresult = new vector< string >((const vector< string > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectoryVector_Clear(void * jarg1) {
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectoryVector_Add(void * jarg1, void * jarg2) {
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  DDirectory **arg2 = 0 ;
  DDirectory *temp2 = 0 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  temp2 = (DDirectory *)jarg2;
  arg2 = (DDirectory **)&temp2; 
  (arg1)->push_back((DDirectory *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DDirectoryVector_size(void * jarg1) {
  unsigned long jresult ;
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  vector< DDirectory * >::size_type result;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  result = ((vector< DDirectory * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DDirectoryVector_capacity(void * jarg1) {
  unsigned long jresult ;
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  vector< DDirectory * >::size_type result;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  result = ((vector< DDirectory * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectoryVector_reserve(void * jarg1, unsigned long jarg2) {
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  vector< DDirectory * >::size_type arg2 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  arg2 = (vector< DDirectory * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DDirectoryVector__SWIG_0() {
  void * jresult ;
  vector< DDirectory * > *result = 0 ;
  
  result = (vector< DDirectory * > *)new vector< DDirectory * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DDirectoryVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< DDirectory * > *arg1 = 0 ;
  vector< DDirectory * > *result = 0 ;
  
  arg1 = (std::vector< DDirectory * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< DDirectory * > const & type is null", 0);
    return 0;
  } 
  result = (vector< DDirectory * > *)new vector< DDirectory * >((std::vector< DDirectory * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DDirectoryVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  vector< DDirectory * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (vector< DDirectory * > *)new_vector_Sl_DDirectory_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DDirectoryVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  int arg2 ;
  DDirectory *result = 0 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (DDirectory *)vector_Sl_DDirectory_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DDirectoryVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  int arg2 ;
  DDirectory **result = 0 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (DDirectory **) &vector_Sl_DDirectory_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectoryVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  int arg2 ;
  DDirectory **arg3 = 0 ;
  DDirectory *temp3 = 0 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (DDirectory *)jarg3;
  arg3 = (DDirectory **)&temp3; 
  try {
    vector_Sl_DDirectory_Sm__Sg__setitem(arg1,arg2,(DDirectory *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectoryVector_AddRange(void * jarg1, void * jarg2) {
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  std::vector< DDirectory * > *arg2 = 0 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  arg2 = (std::vector< DDirectory * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< DDirectory * > const & type is null", 0);
    return ;
  } 
  vector_Sl_DDirectory_Sm__Sg__AddRange(arg1,(vector< DDirectory * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DDirectoryVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< DDirectory * > *result = 0 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< DDirectory * > *)vector_Sl_DDirectory_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectoryVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  int arg2 ;
  DDirectory **arg3 = 0 ;
  DDirectory *temp3 = 0 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (DDirectory *)jarg3;
  arg3 = (DDirectory **)&temp3; 
  try {
    vector_Sl_DDirectory_Sm__Sg__Insert(arg1,arg2,(DDirectory *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectoryVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  int arg2 ;
  std::vector< DDirectory * > *arg3 = 0 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< DDirectory * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< DDirectory * > const & type is null", 0);
    return ;
  } 
  try {
    vector_Sl_DDirectory_Sm__Sg__InsertRange(arg1,arg2,(vector< DDirectory * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectoryVector_RemoveAt(void * jarg1, int jarg2) {
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  int arg2 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    vector_Sl_DDirectory_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectoryVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    vector_Sl_DDirectory_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DDirectoryVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  DDirectory **arg1 = 0 ;
  int arg2 ;
  DDirectory *temp1 = 0 ;
  std::vector< DDirectory * > *result = 0 ;
  
  temp1 = (DDirectory *)jarg1;
  arg1 = (DDirectory **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< DDirectory * > *)vector_Sl_DDirectory_Sm__Sg__Repeat((DDirectory *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectoryVector_Reverse__SWIG_0(void * jarg1) {
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  vector_Sl_DDirectory_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectoryVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    vector_Sl_DDirectory_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DDirectoryVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  int arg2 ;
  std::vector< DDirectory * > *arg3 = 0 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< DDirectory * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< DDirectory * > const & type is null", 0);
    return ;
  } 
  try {
    vector_Sl_DDirectory_Sm__Sg__SetRange(arg1,arg2,(vector< DDirectory * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DDirectoryVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  DDirectory **arg2 = 0 ;
  DDirectory *temp2 = 0 ;
  bool result;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  temp2 = (DDirectory *)jarg2;
  arg2 = (DDirectory **)&temp2; 
  result = (bool)vector_Sl_DDirectory_Sm__Sg__Contains(arg1,(DDirectory *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DDirectoryVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  DDirectory **arg2 = 0 ;
  DDirectory *temp2 = 0 ;
  int result;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  temp2 = (DDirectory *)jarg2;
  arg2 = (DDirectory **)&temp2; 
  result = (int)vector_Sl_DDirectory_Sm__Sg__IndexOf(arg1,(DDirectory *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DDirectoryVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  DDirectory **arg2 = 0 ;
  DDirectory *temp2 = 0 ;
  int result;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  temp2 = (DDirectory *)jarg2;
  arg2 = (DDirectory **)&temp2; 
  result = (int)vector_Sl_DDirectory_Sm__Sg__LastIndexOf(arg1,(DDirectory *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DDirectoryVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  DDirectory **arg2 = 0 ;
  DDirectory *temp2 = 0 ;
  bool result;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  temp2 = (DDirectory *)jarg2;
  arg2 = (DDirectory **)&temp2; 
  result = (bool)vector_Sl_DDirectory_Sm__Sg__Remove(arg1,(DDirectory *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DDirectoryVector(void * jarg1) {
  vector< DDirectory * > *arg1 = (vector< DDirectory * > *) 0 ;
  
  arg1 = (vector< DDirectory * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT DDataProvider * SWIGSTDCALL CSharp_DMySQLDataProvider_SWIGUpcast(DMySQLDataProvider *jarg1) {
    return (DDataProvider *)jarg1;
}

#ifdef __cplusplus
}
#endif

