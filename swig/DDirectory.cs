/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ccdb {

using System;
using System.Runtime.InteropServices;

public partial class DDirectory : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DDirectory(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DDirectory obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DDirectory() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ccdb_csllapiPINVOKE.delete_DDirectory(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public DDirectory() : this(ccdb_csllapiPINVOKE.new_DDirectory(), true) {
  }

  public DDirectory GetParentDirectory() {
    IntPtr cPtr = ccdb_csllapiPINVOKE.DDirectory_GetParentDirectory(swigCPtr);
    DDirectory ret = (cPtr == IntPtr.Zero) ? null : new DDirectory(cPtr, false);
    return ret;
  }

  public DDirectoryVector GetSubdirectories() {
    DDirectoryVector ret = new DDirectoryVector(ccdb_csllapiPINVOKE.DDirectory_GetSubdirectories(swigCPtr), false);
    return ret;
  }

  public void AddSubdirectory(DDirectory subdirectory) {
    ccdb_csllapiPINVOKE.DDirectory_AddSubdirectory(swigCPtr, DDirectory.getCPtr(subdirectory));
  }

  public void DisposeSubdirectories() {
    ccdb_csllapiPINVOKE.DDirectory_DisposeSubdirectories(swigCPtr);
  }

  public uint GetId() {
    uint ret = ccdb_csllapiPINVOKE.DDirectory_GetId(swigCPtr);
    return ret;
  }

  public void SetId(uint val) {
    ccdb_csllapiPINVOKE.DDirectory_SetId(swigCPtr, val);
  }

  public uint GetParentId() {
    uint ret = ccdb_csllapiPINVOKE.DDirectory_GetParentId(swigCPtr);
    return ret;
  }

  public void SetParentId(uint val) {
    ccdb_csllapiPINVOKE.DDirectory_SetParentId(swigCPtr, val);
  }

  public string GetName() {
    string ret = ccdb_csllapiPINVOKE.DDirectory_GetName(swigCPtr);
    return ret;
  }

  public void SetName(string val) {
    ccdb_csllapiPINVOKE.DDirectory_SetName(swigCPtr, val);
    if (ccdb_csllapiPINVOKE.SWIGPendingException.Pending) throw ccdb_csllapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetFullPath() {
    string ret = ccdb_csllapiPINVOKE.DDirectory_GetFullPath(swigCPtr);
    return ret;
  }

  public void SetFullPath(string val) {
    ccdb_csllapiPINVOKE.DDirectory_SetFullPath(swigCPtr, val);
    if (ccdb_csllapiPINVOKE.SWIGPendingException.Pending) throw ccdb_csllapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_time_t GetCreatedTime() {
    SWIGTYPE_p_time_t ret = new SWIGTYPE_p_time_t(ccdb_csllapiPINVOKE.DDirectory_GetCreatedTime(swigCPtr), true);
    return ret;
  }

  public void SetCreatedTime(SWIGTYPE_p_time_t val) {
    ccdb_csllapiPINVOKE.DDirectory_SetCreatedTime(swigCPtr, SWIGTYPE_p_time_t.getCPtr(val));
    if (ccdb_csllapiPINVOKE.SWIGPendingException.Pending) throw ccdb_csllapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_time_t GetModifiedTime() {
    SWIGTYPE_p_time_t ret = new SWIGTYPE_p_time_t(ccdb_csllapiPINVOKE.DDirectory_GetModifiedTime(swigCPtr), true);
    return ret;
  }

  public void SetModifiedTime(SWIGTYPE_p_time_t val) {
    ccdb_csllapiPINVOKE.DDirectory_SetModifiedTime(swigCPtr, SWIGTYPE_p_time_t.getCPtr(val));
    if (ccdb_csllapiPINVOKE.SWIGPendingException.Pending) throw ccdb_csllapiPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetComment() {
    string ret = ccdb_csllapiPINVOKE.DDirectory_GetComment(swigCPtr);
    return ret;
  }

  public void SetComment(string val) {
    ccdb_csllapiPINVOKE.DDirectory_SetComment(swigCPtr, val);
    if (ccdb_csllapiPINVOKE.SWIGPendingException.Pending) throw ccdb_csllapiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
