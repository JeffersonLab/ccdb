/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ccdb {

using System;
using System.Runtime.InteropServices;

public class DDataProvider : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DDataProvider(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DDataProvider obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DDataProvider() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ccdb_csllapiPINVOKE.delete_DDataProvider(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual bool Connect(string connectionString) {
    bool ret = ccdb_csllapiPINVOKE.DDataProvider_Connect(swigCPtr, connectionString);
    if (ccdb_csllapiPINVOKE.SWIGPendingException.Pending) throw ccdb_csllapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Disconnect() {
    ccdb_csllapiPINVOKE.DDataProvider_Disconnect(swigCPtr);
  }

  public virtual bool IsConnected() {
    bool ret = ccdb_csllapiPINVOKE.DDataProvider_IsConnected(swigCPtr);
    return ret;
  }

  public virtual DDirectory GetDirectory(string path) {
    IntPtr cPtr = ccdb_csllapiPINVOKE.DDataProvider_GetDirectory(swigCPtr, path);
    DDirectory ret = (cPtr == IntPtr.Zero) ? null : new DDirectory(cPtr, false);
    if (ccdb_csllapiPINVOKE.SWIGPendingException.Pending) throw ccdb_csllapiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
