CCDB basic usage concepts and ccdb console tool for managing CCDB contents



LIST OF CONTENTS
================

1.  [Basic usage][#ch_basics]
2.  [Connection to database][#ch_connection]
3.  [Help system][#ch_help]
4.  [Commands][#ch_commands]
5.  [Data requests][#ch_requests]



BASIC USAGE. GETTING STARTED
============================

<a id="ch_basics"/>

CCDB provides console tool for introspectiong and managing constants database. 
One can run it by 'ccdb' command. Console tools could be used as interactive shell 
or just like command shell tool. 

Usage from command line is:
   
     ccdb <ccdb arguents> command <command arguments>

Usage as interactive shell:
    
     ccdb <ccdb arguments> -i 
     > command1 
     > command2 
     > ...
     > q 


### Example 1. Command line:

                (1)                           (2)  (3)
      ccdb -c "mysql://john@localhost:999" ls /TOF/params

1. *-c* "mysql://john@localhost" - sets the ccdb connection string. 
   If no *-c*  flag is given, ccdb will try CCDB_CONNECTION environment 
   variable, then use default connection string. The connection strings are 
   described in the [next chapter][#ch_connection]. 

2. *ls* - is a ccdb command which returns a list of directories and tables
     that belongs to directory '/TOF/params'

3  */TOF/params* is the argument of ls command. Like a posix shell ls.


### Example 2. Interactive:
 
      ccdbcmd -c "mysql://john@localhost:999" -i               (1)
      > ls /TOF/params                                         (2)
      > help                                                   (3)
      > cd /TOF                                                (4)
      > cd params
      > ls
      > pwd                                                    (5)                                              
      > q                                                      (6)

1. flag '-i'  will start ccdbcmd in interactive mode. 

2. 'ls /TOF/params' - the result is exactly the same as in Example 1. 
    One stays in the interactive shell after the execution.

3. 'help' command provides list of commands and how to use each of them

4. executing next commands will reproduce Example 1 step by step. 

5. The same as in posix shell, ccdb interactive mode have the current working directory,
   with relative and absolute pathes. *pwd* command will show the current
   working directory.    

6. to exit interactive mode enter 'q', 'quit' or press ^D

Since ccdb objects have /name/paths and many other things that looks like 
POSIX file system, the commands are very posix-shell-like. 


CONNECTION
==========
<a id="ch_connection">


CCDB uses the connection strings to specify a data source. 
The generic format of a conection string is:
<protocol>://<datasource specified string>

*MySQL connection string:*

>  mysql://<username>:<password>@<server_address>:<port> <database>

One may ommit any part except "mysql://" and "<server_address>". The default
values will be used:

CCDB connection defaults:
* username - ccdb_user
* password - no password
* port - default MySQL port (now is 3306)
* database - ccdb


How ccdb gets the connection string:

1. The default connection string is  **"mysql://ccdb_user@localhost ccdb"**

2. if CCDB_CONNECTION environment variable is set it is used overwriting 
   the default connection string.

3. if -c or --connection flag is given in command promt it is used overwriting
   all other.


### Example 3. Connection string 1:

        "mysql://john@localhost:999"

This is the connection string from Example 1. It tells ccdbcmd to connect to:
 *  MySQL server on 'localhost' using port 999
 *  user is 'john' with no password
 *  the database is 'ccdb' by default


### Example 4. Simple connection string:
	
	"mysql://localhost"

 * MySQL server on localhost using port 3306 (default)
 * user is 'ccdb_user' with no password (default)
 * the database is 'ccdb' (default)


### Example 5. Full connection string:

        "mysql://smith:hHjD83f@192.168.1.3:4444 ccdb_database"

It tells ccdbcmd to connect to:
 * MySQL server  on '192.168.1.3' using port 4444 
 * user is 'smith' with password 'hHjD83f'
 * the database is 'ccdb_database'
     


HELP SYSTEM 
===========
<a id="ch_help">

ccdbcmd is designed to be a self descriptive. By using 'help' 'usage' and 'example' commands 
one could get all the commands and how to use them. 

By using 'howto' command one could get tutorials for typical situations. 



COMMANDS
========
<a id="ch_commands">


Commands consistancy
--------------------

Command arguments are choosen to be consistant with other commands. Some flags 
and argument formats means the same across all commands. 
What are these flags? There are several types of "objects" in ccdb. Like
directories, variation, run nuber. Some commands may be applied for different objects. 
For example 'info' command may be executed against directory, table or variation
There are unified flags to identify objects for all commands:

*  *-v* - Variation
*  *-t* - Data table
*  *-r* - Run or run-range
*  *-d* - Directory

### Example 6. Info command:
 
      ccdbcmd -i
      > info -v default                                          (1)
	  > info -r all                                              (2)
	  > info -d /TOF                                             (3)
	  > info -t /TOF/params                                      (4)
	  > info /TOF/params                                         (5)

1. Get information about "default" variation
2. Get information about "all" runrange. "all" runrange is [0, infinite_run]
3. Get information about "/TOF" directory.
4. Get information about "/TOF/params" type table
5. By default '*info*' treat non flag argument as a name of a table. 


Commands overview
------------------

This table is printed if one executes "ccdbcmd help"

+----------+-------------------+------------------------------------------------
|(command) | (name)            |   (description):
+----------+-------------------+------------------------------------------------
|  info    |   Info            |   Prints extended information about an object
|  vers    |   Versions        |   Show versions of data for the specified table
|  run     |   CurrentRun      |   gets or sets current working run
|  dump    |   Dump            |   Dumps datat table to a file
|  show    |   Show            |   Shows type table data
|  mkdir   |   MakeDirectory   |   Create directory
|  pwd     |   PrintWorkDir    |   Prints working directory
|  cd      |   ChangeDir       |   Change current directory
|  add     |   AddData         |   Add data constants
|  mktbl   |   MakeTable       |   Create constants type table
|  cat     |   Cat             |   Show assignment data by ID
|  ls      |   List            |   List objects in a given directory
+----------+-------------------+------------------------------------------------

Assuming that user is in interactive mode, one may categorize the commands:


**To navigate directories**

* pwd - prints curent directory
* cd  - switch to specified directory
* ls  - list objects in the directory (wildcards are allowed)
* mkdir - creates directory

### Example 7. Directory commands overview:

    > pwd
	> cd /TOF
	> ls
	> mkdir constants
	> ls con*


**Get information about objects**

* info - gets information about objects (use -v -r -d flags), see example 6.
* vers - gets all versions of the table
* cat  - displays values
* dump - same as cat but dumps files to disk
* logs - see logs information

**Manage objects**

* mkdir - creates directory
* mktbl - creates data table
* add - adds data from text file to table
  (variation and runranges are created automatically by add command)



DATA REQUESTS
=============
<a id="ch_requests">

There are two problems of acessing data:
1. Getting constants should be as easy as to say "Give this constants for June 2011"
2. There should be the way to give an unique key for every set of data. (One approach to solve such
problem would be to use database indexes but CCDB is database independent. Indexes which are good
to use for database are uneasy for standalone ACSII files. Etc.)

CCDB uses so called "Requests" to solve both of the problems. The full form of the request is 
an "unique composite key" for the particular data values. 
Full form of the request is 

    </path/to/data>:<run>:<variation>:<time>

But to get the data user can specify only a part of the request. 
The minimal request to get the data is just /path/to/data

One may ommit any part of the request except name-path:
* /path/to/data - just path to data, no run, variation and timestamp specified
* /path/to/data::mc - no run specified, variation is "mc", no date specified 
* /path/to/data:::2029 - only path and date(year) are specified

As it is shown in the examples above, one skips the run number and leave its place like "::" 
to specify path and variation but to use the default run:

So 

                   +-- variation
                   |
                   |
   /path/to/data::mc
                ^
                |
                +-- place where run number should be



And the request 
/path/to/data:::2029 
means that we specify path and date but leave the run nubmer and the variation 
to be set by default. What does this default means? We will discuss it in "DEFAULT VALUES" chapter. 


The time is parsed as:

    *YYYY:MM:DD-hh:mm:ss* 

Any non digit character may be used as separator instead of ':' and '-'

so all these data lines are the same
    *2029/06/17-22:03:05* 
    *2029-06-17-22-03-05* 
    *2029/06/17:22/03/05* 
    *2029a06b17c22d03e05* 


One can ommit any part of the time string starting from the right, this the latest date for this 
part will be returned. 

Example: 

"2011" - (this means the year 2011), it will be interpreted as 2011/12/31-23:59:59 timestamp 
so the latest constants for year 2011 will be returned.


"2012/05/21" - it will be interpretted as 2012/05/21-23:59:59 meaning to be the latest
constants for 21 May 2012

CCDB searches the closest constants before or equal to timestampt provided. 



DEFAULT VALUES AND PRIORITIES
=============================

There are two general cases of using the requests:
1. In physics software reads out constants
2. When one manages constants with ccdb console, python or other.

In the first case most probably the software will provide the run number being processed. 
Also, most probably, the software should allow to set the variation to prefer for the analysis. 

So, CCDB defaults and priorities (1 - highest)

Run number:
1. Run number specified in a request 
(if you use "/path/to/data:100" request, constants for run 100 will be returned dependless of the run being processed)
2. Software set global default run number. 
(if 10200 run is being processed and you use "/path/to/data" data for run #10200 will be returned)
3. 0 - (means run number 0).

Variation:
1. Variation specified in a request
(if you use "/path/to/data::mc" request, constants for variation mc will be used dependless of the run being processed)
2. Global prefered variation set by software.
(...)
3. the "default" variation. 
* - see VARIATIONS sections

Time stampt:
1. Request specified time will be used
2. Current time


When one uses ccdb console tool in interactive mode, one can set the default run number by running 'run' command

Example:

> run 100
> cat /path/to/data     # all commands will get constants for run 100
> run                   # you can check what run is set by default
100

C++ API section will overview how to set defult run 






   
